***Author: Adrian Riesco

*** Modules start with the keyword fmod, followed by the module name and the
*** keyword is
fmod PEANO is

 *** The keyword sort is used to specify the datatypes:
 sort PeanoNat .

 *** Operators (keyword op) are used to define functions.
 *** Moreover, when we use the ctor attribute we indicate that they are constructors.
 *** In this case we use 0 and successor (defined as just s) as constructors:
 op 0 : -> PeanoNat [ctor] .
 op s : PeanoNat -> PeanoNat [ctor] .

 *** We declare the variables N and M of sort PeanoNat
 vars N M : PeanoNat .

 *** We define addition, where underscores are placeholders.
 *** We also define it as associative and commutative
 op _+_ : PeanoNat PeanoNat -> PeanoNat [assoc comm] .
 *** Equations are used to define the behavior of functions.
 *** Usually, we distinguish cases using constructors:
 eq [s1] : 0 + N = N .
 eq [s2] : s(N) + M = s(N + M) .

 op _*_ : PeanoNat PeanoNat -> PeanoNat [assoc comm] .
 eq 0 * N = 0 .
 eq s(N) * M = M + (N * M) .

 *** Function "positive" checks whether a number is greater than 0
 op positive : PeanoNat -> Bool .
 eq positive(0) = false .
 eq positive(s(N)) = true .
*** Modules end with the keyword "endfm"
endfm

*** 1 + 2 using successor notation. It should return s(s(s())), that is, 3
red s(0) + (s(s(0))) .

*** 1 + 2 + 6 = 9
red s(0) + s(s(0)) + s(s(s(s(s(s(0)))))) .

*** 2 * 3 = 6
red s(s(0)) * s(s(s(0))) .

*** 2 * 0 = 0
red s(s(0)) * 0 .

*** false
red positive(0) .

*** true
red positive(s(s(0))) .