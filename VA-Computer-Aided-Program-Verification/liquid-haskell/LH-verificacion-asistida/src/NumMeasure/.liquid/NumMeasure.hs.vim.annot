1:1-1:1::NumMeasure.NumMeasure.$trModule :: "GHC.Types.Module"
15:1-15:4::NumMeasure.NumMeasure.die :: "forall a . {v : [GHC.Types.Char] | false} -> a"
15:5-15:8::msg :: "{VV : [GHC.Types.Char] | false}"
15:17-15:20::msg :: "{v : [GHC.Types.Char] | false}"
24:21-24:25::NumMeasure.NumMeasure.vDim :: "forall a .\nx1:(NumMeasure.NumMeasure.Vector a) -> {VV : GHC.Types.Int | VV == vDim x1\n                                                             && VV >= 0}"
37:1-37:5::NumMeasure.NumMeasure.size :: "forall a . x1:[a] -> {VV : GHC.Types.Int | VV == size x1}"
37:15-37:16::lq_anf$##7205759403792813737 :: "{v : GHC.Prim.Int# | v == 0}"
38:15-38:16::lq_anf$##7205759403792813739 :: "GHC.Types.Int"
38:19-38:26::lq_anf$##7205759403792813740 :: "{v : GHC.Types.Int | v == size rs}"
38:24-38:26::rs :: "{v : [a] | v == rs\n           && len v >= 0\n           && 0 <= size v}"
42:1-42:9::NumMeasure.NumMeasure.notEmpty :: "forall a . x1:[a] -> {VV : GHC.Types.Bool | VV <=> notEmpty x1}"
42:18-42:23::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
43:18-43:22::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
51:1-51:4::NumMeasure.NumMeasure.map :: "forall a b . (a -> b) -> x3:[a] -> {VV : [b] | size VV == size x3}"
51:16-51:18::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
52:16-52:19::lq_anf$##7205759403792813758 :: "a"
52:18-52:19::x :: "{VV : a | VV == x}"
52:22-52:30::lq_anf$##7205759403792813759 :: "{v : [a] | size v == size xs}"
52:26-52:27::ds_d56f :: "a -> b"
52:28-52:30::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
60:1-60:8::NumMeasure.NumMeasure.reverse :: "forall a . x1:[a] -> {VV : [a] | size VV == size x1}"
60:9-60:11::xs :: "[a]"
60:21-60:29::lq_anf$##7205759403792813764 :: "{v : [a] | not (notEmpty v)\n           && len v == 0\n           && size v == 0}"
60:24-60:26::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
60:27-60:29::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
63:5-63:7::go :: "x1:[a] -> {VV : [a] | size xs == size x1 + size VV} -> {VV : [a] | size VV == size xs}"
63:8-63:11::acc :: "[a]"
63:21-63:24::acc :: "{v : [a] | v == acc\n           && len v >= 0\n           && 0 <= size v}"
64:21-64:34::go :: "x1:[a] -> {VV : [a] | size xs == size x1 + size VV} -> {VV : [a] | size VV == size xs}"
64:24-64:31::lq_anf$##7205759403792813763 :: "{v : [a] | notEmpty v\n           && head v == x\n           && len v == 1 + len acc\n           && size v == 1 + size acc\n           && tail v == acc}"
64:25-64:26::x :: "{VV : a | VV == x}"
64:27-64:30::acc :: "{v : [a] | v == acc\n           && len v >= 0\n           && 0 <= size v}"
64:32-64:34::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
72:1-72:8::NumMeasure.NumMeasure.zipWith :: "forall a b c .\n(a -> b -> c) -> x4:[a] -> {VV : [b] | size VV == size x4} -> {VV : [c] | size VV == size x4}"
72:9-72:10::f :: "a -> b -> c"
72:27-72:32::lq_anf$##7205759403792813659 :: "a"
72:29-72:30::a :: "{VV : a | VV == a}"
72:31-72:32::b :: "{VV : a | VV == b}"
72:35-72:50::lq_anf$##7205759403792813660 :: "{v : [a] | size v == size as}"
72:43-72:44::f :: "a -> b -> c"
72:45-72:47::as :: "{v : [a] | v == as\n           && len v >= 0\n           && 0 <= size v}"
72:48-72:50::bs :: "{v : [a] | v == bs\n           && len v >= 0\n           && 0 <= size v}"
73:27-73:29::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
74:27-74:47::NumMeasure.NumMeasure.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
74:31-74:47::lq_anf$##7205759403792813658 :: "[GHC.Types.Char]"
77:1-77:4::NumMeasure.NumMeasure.zip :: "forall a b .\nx1:[a] -> x2:[b] -> {v : [(a, b)] | (not (size x1 < size x2) => size v == size x2)\n                                    && (size x1 < size x2 => size v == size x1)}"
77:21-77:27::lq_anf$##7205759403792813771 :: "{v : (a, b) | fst v == a\n              && snd v == b\n              && x_Tuple21 v == a\n              && x_Tuple22 v == b}"
77:22-77:23::a :: "{VV : a | VV == a}"
77:25-77:26::b :: "{VV : a | VV == b}"
77:30-77:39::lq_anf$##7205759403792813772 :: "{v : [(a, b)] | (not (size as < size bs) => size v == size bs)\n                && (size as < size bs => size v == size as)}"
77:34-77:36::as :: "{v : [a] | v == as\n           && len v >= 0\n           && 0 <= size v}"
77:37-77:39::bs :: "{v : [a] | v == bs\n           && len v >= 0\n           && 0 <= size v}"
78:21-78:23::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
79:21-79:23::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
96:1-96:10::NumMeasure.NumMeasure.zipOrNull :: "forall a b .\nx1:[a] -> x2:{bs : [b] | size x1 /= 0 => size bs == size x1\n                                         || size bs == 0} -> {rs : [(a, b)] | (size x1 /= 0\n                                                                               && size x2 /= 0 => size rs == size x1)\n                                                                              && (size x1 == 0\n                                                                                  || size x2 == 0 => size rs == 0)}"
96:19-96:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
97:19-97:21::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
98:19-98:36::lq_anf$##7205759403792813663 :: "x1:a -> x2:b -> {v : (a, b) | fst v == x1\n                              && snd v == x2\n                              && x_Tuple21 v == x1\n                              && x_Tuple22 v == x2}"
98:27-98:30::_ :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | fst v == x1\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"
98:31-98:33::ds_d57N :: "{v : [a] | len v >= 0\n           && 0 <= size v}"
98:34-98:36::ds_d57O :: "{v : [a] | len v >= 0\n           && 0 <= size v}"
101:1-101:6::NumMeasure.NumMeasure.test1 :: "{v : [(GHC.Integer.Type.Integer, GHC.Types.Bool)] | size v == 2}"
101:23-101:29::lq_anf$##7205759403792813672 :: "{v : [GHC.Integer.Type.Integer] | notEmpty v}"
101:24-101:25::lq_anf$##7205759403792813668 :: "{v : GHC.Integer.Type.Integer | v == 0}"
101:27-101:28::lq_anf$##7205759403792813669 :: "{v : GHC.Integer.Type.Integer | v == 1}"
101:30-101:43::lq_anf$##7205759403792813675 :: "{v : [GHC.Types.Bool] | notEmpty v\n                        && head v == True}"
101:31-101:35::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
101:37-101:42::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
104:1-104:6::NumMeasure.NumMeasure.test2 :: "forall a . {v : [(a, GHC.Types.Bool)] | size v == 0}"
104:23-104:25::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
104:26-104:39::lq_anf$##7205759403792813679 :: "{v : [GHC.Types.Bool] | notEmpty v\n                        && head v == True}"
104:27-104:31::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
104:33-104:38::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
107:1-107:6::NumMeasure.NumMeasure.test3 :: "forall a . {v : [([GHC.Types.Char], a)] | size v == 0}"
107:23-107:37::lq_anf$##7205759403792813686 :: "{v : [[GHC.Types.Char]] | notEmpty v}"
107:24-107:29::lq_anf$##7205759403792813681 :: "[GHC.Types.Char]"
107:31-107:36::lq_anf$##7205759403792813683 :: "[GHC.Types.Char]"
107:38-107:40::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
110:1-110:6::NumMeasure.NumMeasure.take' :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> {VV : [a] | x1 <= size VV} -> {VV : [a] | size VV == x1}"
110:18-110:20::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
111:18-111:19::x :: "{VV : a | VV == x}"
111:22-111:36::lq_anf$##7205759403792813704 :: "[a]"
111:28-111:33::lq_anf$##7205759403792813703 :: "GHC.Types.Int"
111:29-111:30::ds_d58s :: "{v : GHC.Types.Int | v >= 0}"
111:31-111:32::lq_anf$##7205759403792813702 :: "GHC.Types.Int"
111:34-111:36::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
112:18-112:37::NumMeasure.NumMeasure.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
112:22-112:37::lq_anf$##7205759403792813700 :: "[GHC.Types.Char]"
122:1-122:5::NumMeasure.NumMeasure.drop :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> x2:{VV : [a] | x1 <= size VV} -> {VV : [a] | size VV == size x2 - x1}"
122:8-122:10::xs :: "[a]"
122:17-122:19::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
123:17-123:30::NumMeasure.NumMeasure.drop :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> x2:{VV : [a] | x1 <= size VV} -> {VV : [a] | size VV == size x2 - x1}"
123:22-123:27::lq_anf$##7205759403792813712 :: "GHC.Types.Int"
123:23-123:24::ds_d58L :: "{v : GHC.Types.Int | v >= 0}"
123:25-123:26::lq_anf$##7205759403792813711 :: "GHC.Types.Int"
123:28-123:30::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
124:17-124:35::NumMeasure.NumMeasure.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
124:21-124:35::lq_anf$##7205759403792813709 :: "[GHC.Types.Char]"
127:1-127:6::NumMeasure.NumMeasure.test4 :: "{VV : [[GHC.Types.Char]] | size VV == 2}"
127:14-127:15::lq_anf$##7205759403792813714 :: "GHC.Types.Int"
127:16-127:39::lq_anf$##7205759403792813724 :: "{v : [[GHC.Types.Char]] | notEmpty v}"
127:17-127:22::lq_anf$##7205759403792813716 :: "[GHC.Types.Char]"
127:24-127:29::lq_anf$##7205759403792813718 :: "[GHC.Types.Char]"
127:31-127:38::lq_anf$##7205759403792813720 :: "[GHC.Types.Char]"
134:1-134:5::NumMeasure.NumMeasure.take :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> x2:[a] -> {VV : [a] | (not (size x2 < x1) => size VV == x1)\n                                                           && (size x2 < x1 => size VV == size x2)}"
134:18-134:20::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
135:18-135:20::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
136:18-136:19::x :: "{VV : a | VV == x}"
136:22-136:35::lq_anf$##7205759403792813779 :: "[a]"
136:27-136:32::lq_anf$##7205759403792813778 :: "GHC.Types.Int"
136:28-136:29::ds_d55l :: "{v : GHC.Types.Int | v >= 0}"
136:30-136:31::lq_anf$##7205759403792813777 :: "GHC.Types.Int"
136:33-136:35::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
139:1-139:6::NumMeasure.NumMeasure.test5 :: "[{VV : [[GHC.Types.Char]] | size VV == 2}]"
139:11-139:42::lq_anf$##7205759403792813792 :: "[[GHC.Types.Char]]"
139:16-139:17::lq_anf$##7205759403792813781 :: "GHC.Types.Int"
139:19-139:42::lq_anf$##7205759403792813791 :: "{v : [[GHC.Types.Char]] | notEmpty v}"
139:20-139:25::lq_anf$##7205759403792813783 :: "[GHC.Types.Char]"
139:27-139:32::lq_anf$##7205759403792813785 :: "[GHC.Types.Char]"
139:34-139:41::lq_anf$##7205759403792813787 :: "[GHC.Types.Char]"
139:45-139:68::lq_anf$##7205759403792813802 :: "[[GHC.Types.Char]]"
139:50-139:52::lq_anf$##7205759403792813794 :: "GHC.Types.Int"
139:53-139:68::lq_anf$##7205759403792813801 :: "{v : [[GHC.Types.Char]] | notEmpty v}"
139:54-139:59::lq_anf$##7205759403792813796 :: "[GHC.Types.Char]"
139:61-139:67::lq_anf$##7205759403792813798 :: "[GHC.Types.Char]"
152:1-152:10::NumMeasure.NumMeasure.partition :: "forall a .\n(a -> GHC.Types.Bool) -> x3:[a] -> {v : ([a], [a]) | size (fst v) + size (snd v) == size x3}"
152:22-152:30::lq_anf$##7205759403792813807 :: "{v : [a] | not (notEmpty v)\n           && len v == 0\n           && size v == 0}"
152:23-152:25::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
152:27-152:29::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
154:5-154:8::lq_anf$##7205759403792813808 :: "GHC.Types.Bool"
154:7-154:8::x :: "{VV : a | VV == x}"
154:22-154:32::GHC.Tuple.(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | fst v == x1\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"
154:23-154:24::x :: "{VV : a | VV == x}"
154:25-154:27::ys :: "{v : [a] | v == ys\n           && len v >= 0\n           && 0 <= size v}"
154:29-154:31::zs :: "{v : [a] | v == zs\n           && len v >= 0\n           && 0 <= size v}"
155:22-155:32::GHC.Tuple.(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | fst v == x1\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"
155:23-155:25::ys :: "{v : [a] | v == ys\n           && len v >= 0\n           && 0 <= size v}"
155:27-155:28::x :: "{VV : a | VV == x}"
155:29-155:31::zs :: "{v : [a] | v == zs\n           && len v >= 0\n           && 0 <= size v}"
157:6-157:8::ys :: "{VV : [a] | len VV >= 0}"
157:10-157:12::zs :: "{VV : [a] | len VV >= 0}"
157:22-157:36::NumMeasure.NumMeasure.partition :: "forall a .\n(a -> GHC.Types.Bool) -> x3:[a] -> {v : ([a], [a]) | size (fst v) + size (snd v) == size x3}"
157:32-157:33::ds_d546 :: "a -> GHC.Types.Bool"
157:34-157:36::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
164:8-164:11::NumMeasure.NumMeasure.>+< :: "forall a .\nx1:[a] -> x2:[a] -> {VV : [a] | size VV == size x1 + size x2}"
164:12-164:14::ys :: "[a]"
164:17-164:18::x :: "{VV : a | VV == x}"
164:21-164:32::lq_anf$##7205759403792813813 :: "{v : [a] | size v == size xs + size ys}"
164:22-164:24::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
164:29-164:31::ys :: "{v : [a] | v == ys\n           && len v >= 0\n           && 0 <= size v}"
165:13-165:15::ys :: "{v : [a] | v == ys\n           && len v >= 0\n           && 0 <= size v}"
169:1-169:10::NumMeasure.NumMeasure.quickSort :: "forall a . (Ord<[]> a) => x2:[a] -> {VV : [a] | size VV == size x2}"
169:20-169:22::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
170:20-170:35::lq_anf$##7205759403792813817 :: "{v : [a] | size v == size lss}"
170:31-170:34::lss :: "{v : [a] | v == lss\n           && len v >= 0\n           && 0 <= size v}"
170:40-170:48::lq_anf$##7205759403792813818 :: "{v : [a] | notEmpty v\n           && head v == x\n           && len v == 1 + len same\n           && size v == 1 + size same\n           && tail v == same}"
170:41-170:42::x :: "{VV : a | VV == x}"
170:43-170:47::same :: "{v : [a] | v == same\n           && len v >= 0\n           && 0 <= size v}"
170:53-170:68::lq_anf$##7205759403792813819 :: "{v : [a] | size v == size gtt}"
170:64-170:67::gtt :: "{v : [a] | v == gtt\n           && len v >= 0\n           && 0 <= size v}"
171:10-171:13::lss :: "{VV : [a] | len VV >= 0}"
171:15-171:20::same' :: "{VV : [a] | len VV >= 0}"
171:24-171:42::lq_anf$##7205759403792813815 :: "x1:a -> {v : GHC.Types.Bool | v <=> x1 < x}"
171:34-171:39::_ :: "GHC.Types.Bool"
171:37-171:38::x :: "{VV : a | VV == x}"
171:40-171:42::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
172:10-172:13::gtt :: "{VV : [a] | len VV >= 0}"
172:15-172:19::same :: "{VV : [a] | len VV >= 0}"
172:23-172:44::lq_anf$##7205759403792813816 :: "x1:a -> {v : GHC.Types.Bool | v <=> x1 > x}"
172:33-172:38::_ :: "GHC.Types.Bool"
172:36-172:37::x :: "{VV : a | VV == x}"
172:39-172:44::same' :: "{v : [a] | v == same'\n           && len v >= 0\n           && 0 <= size v}"
176:1-176:7::NumMeasure.NumMeasure.test10 :: "{VV : [[GHC.Types.Char]] | size VV == 2}"
176:20-176:25::NumMeasure.NumMeasure.test4 :: "{v : [[GHC.Types.Char]] | v == test4\n                          && size v == 2\n                          && len v >= 0\n                          && 0 <= size v}"
188:1-188:6::NumMeasure.NumMeasure.okVec :: "(NumMeasure.NumMeasure.Vector GHC.Integer.Type.Integer)"
188:12-188:13::lq_anf$##7205759403792813843 :: "GHC.Types.Int"
188:14-188:22::lq_anf$##7205759403792813848 :: "{v : [GHC.Integer.Type.Integer] | notEmpty v}"
188:15-188:17::lq_anf$##7205759403792813844 :: "{v : GHC.Integer.Type.Integer | v == 10}"
188:19-188:21::lq_anf$##7205759403792813845 :: "{v : GHC.Integer.Type.Integer | v == 20}"
202:1-202:5::NumMeasure.NumMeasure.vEmp :: "forall a . {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == 0}"
202:10-202:11::lq_anf$##7205759403792813850 :: "GHC.Types.Int"
202:12-202:14::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
205:1-205:6::NumMeasure.NumMeasure.vCons :: "forall a .\na -> x2:(NumMeasure.NumMeasure.Vector a) -> {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == vDim x2 + 1}"
205:7-205:8::x :: "a"
205:20-205:34::NumMeasure.NumMeasure.V :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:{v : [a] | size v == x1} -> {v : (NumMeasure.NumMeasure.Vector a) | vDim v == x1\n                                                                                                                && vElts v == x2} | VV == V}"
205:22-205:27::lq_anf$##7205759403792813855 :: "GHC.Types.Int"
205:23-205:24::n :: "{v : GHC.Types.Int | v == n\n                     && v >= 0}"
205:25-205:26::lq_anf$##7205759403792813854 :: "GHC.Types.Int"
205:28-205:34::lq_anf$##7205759403792813856 :: "{v : [a] | notEmpty v\n           && head v == x\n           && len v == 1 + len xs\n           && size v == 1 + size xs\n           && tail v == xs}"
205:29-205:30::x :: "{VV : a | VV == x}"
205:31-205:33::xs :: "{v : [a] | v == xs\n           && size v == n\n           && len v >= 0\n           && 0 <= size v}"
208:1-208:4::NumMeasure.NumMeasure.vHd :: "forall a .\n{VV : (NumMeasure.NumMeasure.Vector a) | vDim VV > 0} -> a"
208:20-208:21::x :: "{VV : a | VV == x}"
209:20-209:30::NumMeasure.NumMeasure.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
209:24-209:30::lq_anf$##7205759403792813728 :: "[GHC.Types.Char]"
212:1-212:4::NumMeasure.NumMeasure.vTl :: "forall a .\nx1:{VV : (NumMeasure.NumMeasure.Vector a) | vDim VV > 0} -> {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == vDim x1 - 1}"
212:20-212:30::NumMeasure.NumMeasure.V :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:{v : [a] | size v == x1} -> {v : (NumMeasure.NumMeasure.Vector a) | vDim v == x1\n                                                                                                                && vElts v == x2} | VV == V}"
212:22-212:27::lq_anf$##7205759403792813735 :: "GHC.Types.Int"
212:23-212:24::n :: "{v : GHC.Types.Int | v == n\n                     && v >= 0}"
212:25-212:26::lq_anf$##7205759403792813734 :: "GHC.Types.Int"
212:28-212:30::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
213:20-213:30::NumMeasure.NumMeasure.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
213:24-213:30::lq_anf$##7205759403792813732 :: "[GHC.Types.Char]"
216:1-216:4::NumMeasure.NumMeasure.for :: "forall a b .\nx1:(NumMeasure.NumMeasure.Vector a) -> (a -> b) -> {VV : (NumMeasure.NumMeasure.Vector b) | vDim VV == vDim x1}"
216:14-216:15::f :: "a -> b"
216:18-216:32::NumMeasure.NumMeasure.V :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:{v : [a] | size v == x1} -> {v : (NumMeasure.NumMeasure.Vector a) | vDim v == x1\n                                                                                                                && vElts v == x2} | VV == V}"
216:20-216:21::n :: "{v : GHC.Types.Int | v == n\n                     && v >= 0}"
216:22-216:32::lq_anf$##7205759403792813761 :: "{v : [a] | size v == size xs}"
216:27-216:28::f :: "a -> b"
216:29-216:31::xs :: "{v : [a] | v == xs\n           && size v == n\n           && len v >= 0\n           && 0 <= size v}"
222:1-222:5::NumMeasure.NumMeasure.vBin :: "forall a b c .\n(a -> b -> c) -> x4:(NumMeasure.NumMeasure.Vector a) -> {VV : (NumMeasure.NumMeasure.Vector b) | vDim VV == vDim x4} -> {VV : (NumMeasure.NumMeasure.Vector c) | vDim VV == vDim x4}"
222:6-222:8::op :: "a -> b -> c"
222:29-222:51::NumMeasure.NumMeasure.V :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:{v : [a] | size v == x1} -> {v : (NumMeasure.NumMeasure.Vector a) | vDim v == x1\n                                                                                                                && vElts v == x2} | VV == V}"
222:31-222:32::n :: "{v : GHC.Types.Int | v == n\n                     && v >= 0}"
222:33-222:51::lq_anf$##7205759403792813690 :: "{v : [a] | size v == size xs}"
222:42-222:44::op :: "a -> b -> c"
222:45-222:47::xs :: "{v : [a] | v == xs\n           && size v == n\n           && len v >= 0\n           && 0 <= size v}"
222:48-222:50::ys :: "{v : [a] | v == ys\n           && len v >= 0\n           && 0 <= size v}"
225:1-225:11::NumMeasure.NumMeasure.dotProduct :: "forall a .\n(Num<[]> a) =>\nx2:(NumMeasure.NumMeasure.Vector a) -> {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == vDim x2} -> a"
225:12-225:13::x :: "(NumMeasure.NumMeasure.Vector a)"
225:14-225:15::y :: "{VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == vDim x}"
225:18-225:21::lq_anf$##7205759403792813691 :: "[a] -> a"
225:24-225:29::_ :: "{VV : forall a .\n      x1:(NumMeasure.NumMeasure.Vector a) -> {v : [a] | v == vElts x1\n                                                        && size v == vDim x1} | VV == vElts}"
225:32-225:44::lq_anf$##7205759403792813694 :: "{v : (NumMeasure.NumMeasure.Vector a) | vDim v == vDim x}"
225:37-225:40::lq_anf$##7205759403792813693 :: "x1:a -> x2:a -> {VV : a | VV == x1 * x2}"
225:41-225:42::x :: "{v : (NumMeasure.NumMeasure.Vector a) | v == x}"
225:43-225:44::y :: "{v : (NumMeasure.NumMeasure.Vector a) | v == y\n                                        && vDim v == vDim x}"
229:1-229:12::NumMeasure.NumMeasure.vecFromList :: "forall a .\nx1:[a] -> {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == size x1}"
229:13-229:15::xs :: "[a]"
229:22-229:31::lq_anf$##7205759403792813741 :: "{v : GHC.Types.Int | v == size xs}"
229:28-229:30::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
229:32-229:34::xs :: "{v : [a] | v == xs\n           && len v >= 0\n           && 0 <= size v}"
231:1-231:6::NumMeasure.NumMeasure.test6 :: "GHC.Integer.Type.Integer"
231:10-231:26::GHC.Num.$fNumInteger :: "{v : (GHC.Num.Num GHC.Integer.Type.Integer) | v == $fNumInteger}"
231:21-231:23::vx :: "{v : (NumMeasure.NumMeasure.Vector GHC.Integer.Type.Integer) | v == vx}"
231:24-231:26::vy :: "{v : (NumMeasure.NumMeasure.Vector GHC.Integer.Type.Integer) | v == vy}"
233:5-233:7::vx :: "(NumMeasure.NumMeasure.Vector GHC.Integer.Type.Integer)"
233:10-233:29::_ :: "(NumMeasure.NumMeasure.Vector GHC.Integer.Type.Integer)"
233:22-233:29::lq_anf$##7205759403792813755 :: "{v : [GHC.Integer.Type.Integer] | notEmpty v}"
233:23-233:24::lq_anf$##7205759403792813749 :: "{v : GHC.Integer.Type.Integer | v == 1}"
233:25-233:26::lq_anf$##7205759403792813750 :: "{v : GHC.Integer.Type.Integer | v == 2}"
233:27-233:28::lq_anf$##7205759403792813751 :: "{v : GHC.Integer.Type.Integer | v == 3}"
234:5-234:7::vy :: "(NumMeasure.NumMeasure.Vector GHC.Integer.Type.Integer)"
234:10-234:29::_ :: "(NumMeasure.NumMeasure.Vector GHC.Integer.Type.Integer)"
234:22-234:29::lq_anf$##7205759403792813748 :: "{v : [GHC.Integer.Type.Integer] | notEmpty v}"
234:23-234:24::lq_anf$##7205759403792813742 :: "{v : GHC.Integer.Type.Integer | v == 4}"
234:25-234:26::lq_anf$##7205759403792813743 :: "{v : GHC.Integer.Type.Integer | v == 5}"
234:27-234:28::lq_anf$##7205759403792813744 :: "{v : GHC.Integer.Type.Integer | v == 6}"
247:1-247:8::NumMeasure.NumMeasure.flatten :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> x2:{VV : GHC.Types.Int | VV >= 0} -> {VV : (NumMeasure.NumMeasure.Vector {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == x2}) | vDim VV == x1} -> {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == x2 * x1}"
247:9-247:10::n :: "{VV : GHC.Types.Int | VV >= 0}"
247:11-247:12::m :: "{VV : GHC.Types.Int | VV >= 0}"
247:13-247:14::v :: "{VV : (NumMeasure.NumMeasure.Vector {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == m}) | vDim VV == n}"
247:17-247:64::NumMeasure.NumMeasure.vecFromList :: "{VV : forall a .\n      x1:[a] -> {v : (NumMeasure.NumMeasure.Vector a) | vDim v == size x1} | VV == vecFromList}"
247:29-247:64::lq_anf$##7205759403792813835 :: "{v : [a] | size v == m * n}"
247:39-247:60::lq_anf$##7205759403792813833 :: "[[a]]"
247:44-247:49::_ :: "{VV : forall a .\n      x1:(NumMeasure.NumMeasure.Vector a) -> {v : [a] | v == vElts x1\n                                                        && size v == vDim x1} | VV == vElts}"
247:50-247:59::lq_anf$##7205759403792813832 :: "{v' : [(NumMeasure.NumMeasure.Vector a)] | v' == vElts v\n                                           && size v' == vDim v}"
247:57-247:58::v :: "{v' : (NumMeasure.NumMeasure.Vector {v : (NumMeasure.NumMeasure.Vector a) | vDim v == m}) | v' == v\n                                                                                            && vDim v' == n}"
247:61-247:63::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0\n                                                  && size v == 0} | VV == []}"
250:5-250:13::flatten' :: "x1:[{VV : [a] | size VV == m}] -> {VV : [a] | size VV == m * (n - size x1)} -> {VV : [a] | size VV == m * n}"
250:17-250:20::acc :: "[a]"
250:23-250:26::acc :: "{v : [a] | v == acc\n           && len v >= 0\n           && 0 <= size v}"
251:29-251:54::flatten' :: "x1:[{VV : [a] | size VV == m}] -> {VV : [a] | size VV == m * (n - size x1)} -> {VV : [a] | size VV == m * n}"
251:38-251:41::xss :: "{v : [{v : [a] | size v == m}] | v == xss\n                                 && len v >= 0\n                                 && 0 <= size v}"
251:42-251:54::lq_anf$##7205759403792813830 :: "{v : [a] | size v == size acc + size xs}"
251:43-251:46::acc :: "{v : [a] | v == acc\n           && len v >= 0\n           && 0 <= size v}"
251:51-251:53::xs :: "{v : [a] | v == xs\n           && size v == m\n           && len v >= 0\n           && 0 <= size v}"
257:1-257:8::NumMeasure.NumMeasure.product :: "forall a .\n(Num<[]> a) =>\nx2:(NumMeasure.NumMeasure.Vector a) -> x3:(NumMeasure.NumMeasure.Vector a) -> {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == vDim x2 * vDim x3}"
257:9-257:11::xs :: "(NumMeasure.NumMeasure.Vector a)"
257:12-257:14::ys :: "(NumMeasure.NumMeasure.Vector a)"
257:17-257:48::NumMeasure.NumMeasure.flatten :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | v >= 0} -> x2:{v : GHC.Types.Int | v >= 0} -> {v : (NumMeasure.NumMeasure.Vector {v : (NumMeasure.NumMeasure.Vector a) | vDim v == x2}) | vDim v == x1} -> {v : (NumMeasure.NumMeasure.Vector a) | vDim v == x2 * x1} | VV == flatten}"
257:25-257:34::lq_anf$##7205759403792813840 :: "{v : GHC.Types.Int | v == vDim ys\n                     && v >= 0}"
257:31-257:33::ys :: "{v : (NumMeasure.NumMeasure.Vector a) | v == ys}"
257:35-257:44::lq_anf$##7205759403792813841 :: "{v : GHC.Types.Int | v == vDim xs\n                     && v >= 0}"
257:41-257:43::xs :: "{v : (NumMeasure.NumMeasure.Vector a) | v == xs}"
257:45-257:48::xys :: "{v : (NumMeasure.NumMeasure.Vector (NumMeasure.NumMeasure.Vector a)) | v == xys\n                                                                       && vDim v == vDim ys}"
259:5-259:8::xys :: "{v : (NumMeasure.NumMeasure.Vector (NumMeasure.NumMeasure.Vector a)) | vDim v == vDim ys}"
259:17-259:23::lq_anf$##7205759403792813836 :: "(a -> (NumMeasure.NumMeasure.Vector a)) -> {v : (NumMeasure.NumMeasure.Vector (NumMeasure.NumMeasure.Vector a)) | vDim v == vDim ys}"
259:21-259:23::ys :: "{v : (NumMeasure.NumMeasure.Vector a) | v == ys}"
259:27-259:28::y :: "a"
260:19-260:25::lq_anf$##7205759403792813837 :: "(a -> a) -> {v : (NumMeasure.NumMeasure.Vector a) | vDim v == vDim xs}"
260:23-260:25::xs :: "{v : (NumMeasure.NumMeasure.Vector a) | v == xs}"
260:29-260:30::x :: "a"
261:21-261:22::x :: "{VV : a | VV == x}"
261:25-261:26::y :: "{VV : a | VV == y}"
277:1-277:5::NumMeasure.NumMeasure.ok23 :: "{VV : (NumMeasure.NumMeasure.Matrix GHC.Integer.Type.Integer) | mCol VV == 3\n                                                                && mRow VV == 2}"
277:14-277:15::lq_anf$##7205759403792813868 :: "GHC.Types.Int"
277:16-277:17::lq_anf$##7205759403792813870 :: "GHC.Types.Int"
277:21-277:22::lq_anf$##7205759403792813872 :: "GHC.Types.Int"
277:25-277:38::lq_anf$##7205759403792813882 :: "(NumMeasure.NumMeasure.Vector GHC.Integer.Type.Integer)"
277:27-277:28::lq_anf$##7205759403792813874 :: "GHC.Types.Int"
277:29-277:38::lq_anf$##7205759403792813881 :: "{v : [GHC.Integer.Type.Integer] | notEmpty v}"
277:30-277:31::lq_anf$##7205759403792813875 :: "{v : GHC.Integer.Type.Integer | v == 1}"
277:33-277:34::lq_anf$##7205759403792813876 :: "{v : GHC.Integer.Type.Integer | v == 2}"
277:36-277:37::lq_anf$##7205759403792813877 :: "{v : GHC.Integer.Type.Integer | v == 3}"
278:25-278:38::lq_anf$##7205759403792813892 :: "(NumMeasure.NumMeasure.Vector GHC.Integer.Type.Integer)"
278:27-278:28::lq_anf$##7205759403792813884 :: "GHC.Types.Int"
278:29-278:38::lq_anf$##7205759403792813891 :: "{v : [GHC.Integer.Type.Integer] | notEmpty v}"
278:30-278:31::lq_anf$##7205759403792813885 :: "{v : GHC.Integer.Type.Integer | v == 4}"
278:33-278:34::lq_anf$##7205759403792813886 :: "{v : GHC.Integer.Type.Integer | v == 5}"
278:36-278:37::lq_anf$##7205759403792813887 :: "{v : GHC.Integer.Type.Integer | v == 6}"
343:1-343:10::NumMeasure.NumMeasure.transpose :: "forall a .\nx1:(NumMeasure.NumMeasure.Matrix a) -> {VV : (NumMeasure.NumMeasure.Matrix a) | mCol VV == mRow x1\n                                                                                && mRow VV == mCol x1}"
343:26-343:47::NumMeasure.NumMeasure.M :: "{VV : forall a .\n      x1:{v : GHC.Types.Int | 0 < v} -> x2:{v : GHC.Types.Int | 0 < v} -> x3:{v : (NumMeasure.NumMeasure.Vector {v : (NumMeasure.NumMeasure.Vector a) | vDim v == x2}) | vDim v == x1} -> {v : (NumMeasure.NumMeasure.Matrix a) | mCol v == x2\n                                                                                                                                                                                                                                  && mElts v == x3\n                                                                                                                                                                                                                                  && mRow v == x1} | VV == M}"
343:28-343:29::c :: "{v : GHC.Types.Int | v == c\n                     && 0 < v}"
343:30-343:31::r :: "{v : GHC.Types.Int | v == r\n                     && 0 < v}"
343:32-343:47::lq_anf$##7205759403792813866 :: "{v : (NumMeasure.NumMeasure.Vector {v : (NumMeasure.NumMeasure.Vector a) | vDim v == r}) | vDim v == c}"
343:38-343:39::c :: "{v : GHC.Types.Int | v == c\n                     && 0 < v}"
343:40-343:41::r :: "{v : GHC.Types.Int | v == r\n                     && 0 < v}"
343:42-343:46::rows :: "{v : (NumMeasure.NumMeasure.Vector {v : (NumMeasure.NumMeasure.Vector a) | vDim v == c}) | v == rows\n                                                                                           && vDim v == r}"
350:1-350:5::NumMeasure.NumMeasure.txgo :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> x2:{VV : GHC.Types.Int | VV >= 0} -> {VV : (NumMeasure.NumMeasure.Vector {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == x1}) | vDim VV == x2} -> {VV : (NumMeasure.NumMeasure.Vector {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == x2}) | vDim VV == x1}"
350:17-350:21::_ :: "{VV : forall a .\n      {v : (NumMeasure.NumMeasure.Vector a) | vDim v == 0} | VV == vEmp}"
351:17-351:28::NumMeasure.NumMeasure.vCons :: "{VV : forall a .\n      a -> x2:(NumMeasure.NumMeasure.Vector a) -> {v : (NumMeasure.NumMeasure.Vector a) | vDim v == vDim x2 + 1} | VV == vCons}"
351:23-351:24::v :: "{v' : (NumMeasure.NumMeasure.Vector a) | v' == v}"
351:25-351:28::vss :: "{v : (NumMeasure.NumMeasure.Vector (NumMeasure.NumMeasure.Vector a)) | v == vss}"
353:5-353:6::v :: "(NumMeasure.NumMeasure.Vector a)"
353:9-353:21::lq_anf$##7205759403792813864 :: "{v : (NumMeasure.NumMeasure.Vector a) | vDim v > 0} -> a"
353:13-353:17::ds_d59R :: "(NumMeasure.NumMeasure.Vector (NumMeasure.NumMeasure.Vector a))"
353:18-353:21::_ :: "{VV : forall a .\n      {v : (NumMeasure.NumMeasure.Vector a) | vDim v > 0} -> a | VV == vHd}"
354:5-354:8::vss :: "(NumMeasure.NumMeasure.Vector (NumMeasure.NumMeasure.Vector a))"
354:11-354:40::NumMeasure.NumMeasure.txgo :: "forall a .\nx1:{VV : GHC.Types.Int | VV >= 0} -> x2:{VV : GHC.Types.Int | VV >= 0} -> {VV : (NumMeasure.NumMeasure.Vector {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == x1}) | vDim VV == x2} -> {VV : (NumMeasure.NumMeasure.Vector {VV : (NumMeasure.NumMeasure.Vector a) | vDim VV == x2}) | vDim VV == x1}"
354:16-354:23::lq_anf$##7205759403792813861 :: "GHC.Types.Int"
354:17-354:18::ds_d59P :: "{v : GHC.Types.Int | v >= 0}"
354:21-354:22::lq_anf$##7205759403792813860 :: "GHC.Types.Int"
354:24-354:25::ds_d59Q :: "{v : GHC.Types.Int | v >= 0}"
354:26-354:40::lq_anf$##7205759403792813863 :: "(NumMeasure.NumMeasure.Vector (NumMeasure.NumMeasure.Vector a))"
354:31-354:35::ds_d59R :: "(NumMeasure.NumMeasure.Vector (NumMeasure.NumMeasure.Vector a))"
354:36-354:39::_ :: "{VV : forall a .\n      x1:{v : (NumMeasure.NumMeasure.Vector a) | vDim v > 0} -> {v : (NumMeasure.NumMeasure.Vector a) | vDim v == vDim x1 - 1} | VV == vTl}"