1:1-1:1::Basic.Basic.$trModule :: "GHC.Types.Module"
55:1-55:5::Basic.Basic.zero :: "{VV : GHC.Types.Int | VV == 0}"
58:1-58:4::Basic.Basic.one :: "{VV : GHC.Types.Int | VV /= 0}"
59:1-59:4::Basic.Basic.two :: "{VV : GHC.Types.Int | VV /= 0}"
60:1-60:6::Basic.Basic.three :: "{VV : GHC.Types.Int | VV /= 0}"
69:1-69:9::Basic.Basic.nonsense :: "GHC.Types.Int"
69:12-69:16::one' :: "{v : GHC.Types.Int | v == 0\n                     && v == one'}"
72:3-72:7::one' :: "{VV : GHC.Types.Int | VV == 0}"
72:10-72:18::lq_anf$##7205759403792804818 :: "{v : GHC.Prim.Int# | v == 1}"
124:1-124:6::Basic.Basic.zero' :: "{VV : GHC.Types.Int | VV >= 0}"
132:1-132:7::Basic.Basic.zero'' :: "{VV : GHC.Types.Int | VV mod 2 == 0}"
145:1-145:8::Basic.Basic.zero''' :: "{VV : GHC.Types.Int | VV < 100}"
173:1-173:9::Basic.Basic.zero'''' :: "{v : GHC.Types.Int | v mod 2 == 0\n                     && v < 100\n                     && 0 <= v}"
199:1-199:4::Basic.Basic.die :: "forall a . {VV : [GHC.Types.Char] | false} -> a"
199:5-199:8::msg :: "{VV : [GHC.Types.Char] | false}"
199:17-199:20::msg :: "{v : [GHC.Types.Char] | false}"
210:1-210:10::Basic.Basic.cannotDie :: "()"
210:16-210:17::lq_anf$##7205759403792804850 :: "{v : GHC.Integer.Type.Integer | v == 1}"
210:20-210:21::lq_anf$##7205759403792804851 :: "{v : GHC.Integer.Type.Integer | v == 1}"
210:25-210:26::lq_anf$##7205759403792804853 :: "{v : GHC.Integer.Type.Integer | v == 3}"
211:20-211:40::Basic.Basic.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
211:24-211:40::lq_anf$##7205759403792804857 :: "[GHC.Types.Char]"
212:20-212:22::GHC.Tuple.() :: "{v : () | v == ()}"
220:1-220:7::Basic.Basic.canDie :: "()"
220:13-220:14::lq_anf$##7205759403792804858 :: "{v : GHC.Integer.Type.Integer | v == 1}"
220:17-220:18::lq_anf$##7205759403792804859 :: "{v : GHC.Integer.Type.Integer | v == 1}"
220:22-220:23::lq_anf$##7205759403792804861 :: "{v : GHC.Integer.Type.Integer | v == 2}"
221:17-221:37::Basic.Basic.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
221:21-221:37::lq_anf$##7205759403792804865 :: "[GHC.Types.Char]"
222:17-222:19::GHC.Tuple.() :: "{v : () | v == ()}"
239:1-239:8::Basic.Basic.divide' :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
239:9-239:10::n :: "GHC.Types.Int"
239:15-239:35::Basic.Basic.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
239:19-239:35::lq_anf$##7205759403792804886 :: "[GHC.Types.Char]"
240:15-240:16::n :: "{v : GHC.Types.Int | v == n}"
240:23-240:24::ds_d2No :: "GHC.Types.Int"
253:1-253:7::Basic.Basic.divide :: "GHC.Types.Int -> {VV : GHC.Types.Int | VV /= 0} -> GHC.Types.Int"
253:14-253:34::Basic.Basic.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
253:18-253:34::lq_anf$##7205759403792804890 :: "[GHC.Types.Char]"
254:14-254:15::ds_d2Ny :: "GHC.Types.Int"
254:22-254:23::ds_d2Nz :: "{v : GHC.Types.Int | v /= 0}"
279:1-279:5::Basic.Basic.avg2 :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
279:6-279:7::x :: "GHC.Types.Int"
279:8-279:9::y :: "GHC.Types.Int"
279:21-279:28::lq_anf$##7205759403792804891 :: "{v : GHC.Types.Int | v == x + y}"
279:22-279:23::x :: "{v : GHC.Types.Int | v == x}"
279:26-279:27::y :: "{v : GHC.Types.Int | v == y}"
279:29-279:30::lq_anf$##7205759403792804893 :: "GHC.Types.Int"
280:1-280:5::Basic.Basic.avg3 :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
280:6-280:7::x :: "GHC.Types.Int"
280:8-280:9::y :: "GHC.Types.Int"
280:10-280:11::z :: "GHC.Types.Int"
280:21-280:32::lq_anf$##7205759403792804895 :: "GHC.Types.Int"
280:22-280:23::x :: "{v : GHC.Types.Int | v == x}"
280:26-280:27::y :: "{v : GHC.Types.Int | v == y}"
280:30-280:31::z :: "{v : GHC.Types.Int | v == z}"
280:33-280:34::lq_anf$##7205759403792804897 :: "GHC.Types.Int"
296:1-296:8::Basic.Basic.length' :: "forall a . x1:[a] -> {VV : GHC.Types.Int | VV == length' x1}"
296:14-296:15::lq_anf$##7205759403792804899 :: "{v : GHC.Prim.Int# | v == 0}"
297:18-297:19::lq_anf$##7205759403792804901 :: "GHC.Types.Int"
297:22-297:32::lq_anf$##7205759403792804902 :: "{v : GHC.Types.Int | v == length' xs}"
297:30-297:32::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
302:1-302:4::Basic.Basic.avg :: "{v : [GHC.Types.Int] | length' v > 0} -> GHC.Types.Int"
302:5-302:7::xs :: "{v : [GHC.Types.Int] | length' v > 0}"
302:10-302:24::Basic.Basic.divide :: "GHC.Types.Int -> {v : GHC.Types.Int | v /= 0} -> GHC.Types.Int"
302:17-302:22::total :: "{v : GHC.Types.Int | v == total}"
302:23-302:24::n :: "{v : GHC.Types.Int | v == n\n                     && v == length' xs}"
304:5-304:10::total :: "GHC.Types.Int"
304:13-304:19::_ :: "GHC.Types.Int"
304:17-304:19::xs :: "{v : [GHC.Types.Int] | v == xs\n                       && length' v > 0\n                       && len v >= 0}"
305:5-305:6::n :: "{v : GHC.Types.Int | v == length' xs}"
305:13-305:23::Basic.Basic.length' :: "forall a . x1:[a] -> {VV : GHC.Types.Int | VV == length' x1}"
305:21-305:23::xs :: "{v : [GHC.Types.Int] | v == xs\n                       && length' v > 0\n                       && len v >= 0}"
317:1-317:4::Basic.Basic.abs :: "GHC.Types.Int -> {VV : GHC.Types.Int | VV >= 0}"
317:5-317:6::n :: "GHC.Types.Int"
318:5-318:6::lq_anf$##7205759403792804924 :: "GHC.Types.Int"
318:9-318:10::n :: "{v : GHC.Types.Int | v == n}"
318:17-318:18::n :: "{v : GHC.Types.Int | v == n}"
319:17-319:18::lq_anf$##7205759403792804928 :: "GHC.Types.Int"
319:21-319:22::n :: "{v : GHC.Types.Int | v == n}"
346:1-346:5::Basic.Basic.calc :: "forall a . (GHC.Types.IO a)"
346:11-346:37::lq_anf$##7205759403792804914 :: "(GHC.Types.IO ())"
346:20-346:37::lq_anf$##7205759403792804913 :: "[GHC.Types.Char]"
347:11-347:12::n :: "GHC.Types.Int"
347:16-347:22::_ :: "(GHC.Types.IO GHC.Types.Int)"
348:11-348:39::lq_anf$##7205759403792804917 :: "(GHC.Types.IO ())"
348:20-348:39::lq_anf$##7205759403792804916 :: "[GHC.Types.Char]"
349:11-349:12::d :: "GHC.Types.Int"
349:16-349:22::_ :: "(GHC.Types.IO GHC.Types.Int)"
350:11-350:32::lq_anf$##7205759403792804919 :: "(GHC.Types.IO ())"
350:20-350:32::lq_anf$##7205759403792804918 :: "[GHC.Types.Char]"
350:28-350:29::n :: "{v : GHC.Types.Int | v == n}"
350:30-350:31::d :: "{v : GHC.Types.Int | v == d}"
351:11-351:15::lq_anf$##7205759403792804920 :: "(GHC.Types.IO a)"
360:1-360:7::Basic.Basic.result :: "GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Char]"
360:8-360:9::n :: "GHC.Types.Int"
360:10-360:11::d :: "GHC.Types.Int"
361:5-361:17::lq_anf$##7205759403792804905 :: "{v : GHC.Types.Bool | v <=> d > 0}"
361:16-361:17::d :: "{v : GHC.Types.Int | v == d}"
361:20-361:31::lq_anf$##7205759403792804909 :: "[GHC.Types.Char]"
361:35-361:54::lq_anf$##7205759403792804911 :: "[GHC.Types.Char]"
361:40-361:54::lq_anf$##7205759403792804910 :: "GHC.Types.Int"
361:41-361:42::n :: "{v : GHC.Types.Int | v == n}"
361:52-361:53::d :: "{v : GHC.Types.Int | v == d}"
362:20-362:63::lq_anf$##7205759403792804907 :: "{v : GHC.Prim.Addr# | v == \"Humph, please enter positive denominator!\"}"
370:1-370:11::Basic.Basic.isPositive :: "x1:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 > 0}"
370:12-370:13::x :: "GHC.Types.Int"
370:16-370:17::x :: "{v : GHC.Types.Int | v == x}"
370:20-370:21::lq_anf$##7205759403792804904 :: "GHC.Types.Int"
408:1-408:8::Basic.Basic.lAssert :: "forall a . GHC.Types.Bool -> a -> a"
408:15-408:16::x :: "a"
408:19-408:20::x :: "{VV : a | VV == x}"
409:19-409:48::Basic.Basic.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
409:23-409:48::lq_anf$##7205759403792804868 :: "[GHC.Types.Char]"
411:1-411:4::Basic.Basic.yes :: "()"
411:15-411:27::lq_anf$##7205759403792804873 :: "GHC.Types.Bool"
411:16-411:17::lq_anf$##7205759403792804869 :: "{v : GHC.Integer.Type.Integer | v == 1}"
411:20-411:21::lq_anf$##7205759403792804870 :: "{v : GHC.Integer.Type.Integer | v == 1}"
411:25-411:26::lq_anf$##7205759403792804872 :: "{v : GHC.Integer.Type.Integer | v == 2}"
411:28-411:30::GHC.Tuple.() :: "{v : () | v == ()}"
412:1-412:3::Basic.Basic.no :: "()"
412:15-412:27::lq_anf$##7205759403792804878 :: "GHC.Types.Bool"
412:16-412:17::lq_anf$##7205759403792804874 :: "{v : GHC.Integer.Type.Integer | v == 1}"
412:20-412:21::lq_anf$##7205759403792804875 :: "{v : GHC.Integer.Type.Integer | v == 1}"
412:25-412:26::lq_anf$##7205759403792804877 :: "{v : GHC.Integer.Type.Integer | v == 3}"
412:28-412:30::GHC.Tuple.() :: "{v : () | v == ()}"
425:1-425:9::Basic.Basic.truncate :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
425:10-425:11::i :: "GHC.Types.Int"
425:12-425:15::max :: "GHC.Types.Int"
426:5-426:7::i' :: "{v : GHC.Types.Int | v == i'\n                     && v >= 0}"
426:11-426:15::max' :: "{v : GHC.Types.Int | v == max'\n                     && v >= 0}"
426:18-426:19::i :: "{v : GHC.Types.Int | v == i}"
427:18-427:22::max' :: "{v : GHC.Types.Int | v == max'\n                     && v >= 0}"
427:25-427:40::lq_anf$##7205759403792804931 :: "GHC.Types.Int"
427:26-427:27::i :: "{v : GHC.Types.Int | v == i}"
427:37-427:39::i' :: "{v : GHC.Types.Int | v == i'\n                     && v >= 0}"
429:7-429:9::i' :: "{v : GHC.Types.Int | v >= 0}"
429:18-429:23::_ :: "{v : GHC.Types.Int | v >= 0}"
429:22-429:23::i :: "{v : GHC.Types.Int | v == i}"
430:7-430:11::max' :: "{v : GHC.Types.Int | v >= 0}"
430:18-430:25::_ :: "{v : GHC.Types.Int | v >= 0}"
430:22-430:25::max :: "{v : GHC.Types.Int | v == max}"