1:1-1:1::Basic.Lists.$trModule :: "GHC.Types.Module"
45:1-45:7::Basic.Lists.okList :: "(Basic.Lists.IncList GHC.Integer.Type.Integer)"
45:11-45:12::lq_anf$##7205759403792803063 :: "{v : GHC.Integer.Type.Integer | v == 1}"
45:16-45:17::lq_anf$##7205759403792803064 :: "{v : GHC.Integer.Type.Integer | v == 2}"
45:21-45:22::lq_anf$##7205759403792803065 :: "{v : GHC.Integer.Type.Integer | v == 3}"
45:26-45:29::_ :: "{VV : forall a . (Basic.Lists.IncList a) | VV == Emp}"
54:1-54:5::Basic.Lists.join :: "forall a .\nx1:a -> (Basic.Lists.IncList {VV : a | VV <= x1}) -> (Basic.Lists.IncList {VV : a | VV > x1}) -> (Basic.Lists.IncList a)"
54:6-54:7::z :: "a"
54:18-54:20::ys :: "(Basic.Lists.IncList {VV : a | VV > z})"
54:23-54:24::z :: "{VV : a | VV == z}"
54:28-54:30::ys :: "{v : (Basic.Lists.IncList {VV : a | VV > z}) | v == ys}"
55:23-55:24::x :: "{VV : a | VV == x\n          && VV <= z}"
55:28-55:40::lq_anf$##7205759403792803070 :: "(Basic.Lists.IncList a)"
55:33-55:34::z :: "{VV : a | VV == z}"
55:35-55:37::xs :: "{v : (Basic.Lists.IncList {VV : a | VV <= z\n                                    && x <= VV}) | v == xs}"
55:38-55:40::ys :: "{v : (Basic.Lists.IncList {VV : a | VV > z}) | v == ys}"