1:1-1:1::Basic.Basic.$trModule :: "GHC.Types.Module"
14:1-14:5::Basic.Basic.zero :: "{VV : GHC.Types.Int | VV == 0}"
17:1-17:4::Basic.Basic.one :: "{VV : GHC.Types.Int | VV /= 0}"
18:1-18:4::Basic.Basic.two :: "{VV : GHC.Types.Int | VV /= 0}"
19:1-19:6::Basic.Basic.three :: "{VV : GHC.Types.Int | VV /= 0}"
21:1-21:9::Basic.Basic.nonsense :: "GHC.Types.Int"
21:12-21:16::one' :: "{v : GHC.Types.Int | v == 0\n                     && v == one'}"
24:3-24:7::one' :: "{VV : GHC.Types.Int | VV == 0}"
24:10-24:18::lq_anf$##7205759403792804818 :: "{v : GHC.Prim.Int# | v == 1}"
31:1-31:6::Basic.Basic.zero' :: "{VV : GHC.Types.Int | VV >= 0}"
34:1-34:7::Basic.Basic.zero'' :: "{VV : GHC.Types.Int | VV mod 2 == 0}"
37:1-37:8::Basic.Basic.zero''' :: "{VV : GHC.Types.Int | VV < 100}"
40:1-40:9::Basic.Basic.zero'''' :: "{v : GHC.Types.Int | v mod 2 == 0\n                     && v < 100\n                     && 0 <= v}"
43:1-43:4::Basic.Basic.die :: "forall a . {VV : [GHC.Types.Char] | false} -> a"
43:5-43:8::msg :: "{VV : [GHC.Types.Char] | false}"
43:17-43:20::msg :: "{v : [GHC.Types.Char] | false}"
45:1-45:10::Basic.Basic.cannotDie :: "()"
45:16-45:17::lq_anf$##7205759403792804850 :: "{v : GHC.Integer.Type.Integer | v == 1}"
45:20-45:21::lq_anf$##7205759403792804851 :: "{v : GHC.Integer.Type.Integer | v == 1}"
45:25-45:26::lq_anf$##7205759403792804853 :: "{v : GHC.Integer.Type.Integer | v == 3}"
46:20-46:40::Basic.Basic.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
46:24-46:40::lq_anf$##7205759403792804857 :: "[GHC.Types.Char]"
47:20-47:22::GHC.Tuple.() :: "{v : () | v == ()}"
49:1-49:7::Basic.Basic.canDie :: "()"
49:13-49:14::lq_anf$##7205759403792804858 :: "{v : GHC.Integer.Type.Integer | v == 1}"
49:17-49:18::lq_anf$##7205759403792804859 :: "{v : GHC.Integer.Type.Integer | v == 1}"
49:22-49:23::lq_anf$##7205759403792804861 :: "{v : GHC.Integer.Type.Integer | v == 2}"
50:17-50:37::Basic.Basic.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
50:21-50:37::lq_anf$##7205759403792804865 :: "[GHC.Types.Char]"
51:17-51:19::GHC.Tuple.() :: "{v : () | v == ()}"
54:1-54:8::Basic.Basic.divide' :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
54:9-54:10::n :: "GHC.Types.Int"
54:15-54:35::Basic.Basic.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
54:19-54:35::lq_anf$##7205759403792804886 :: "[GHC.Types.Char]"
55:15-55:16::n :: "{v : GHC.Types.Int | v == n}"
55:23-55:24::ds_d2No :: "GHC.Types.Int"
58:1-58:7::Basic.Basic.divide :: "GHC.Types.Int -> {VV : GHC.Types.Int | VV /= 0} -> GHC.Types.Int"
58:14-58:34::Basic.Basic.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
58:18-58:34::lq_anf$##7205759403792804890 :: "[GHC.Types.Char]"
59:14-59:15::ds_d2Ny :: "GHC.Types.Int"
59:22-59:23::ds_d2Nz :: "{v : GHC.Types.Int | v /= 0}"
61:1-61:5::Basic.Basic.avg2 :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
61:6-61:7::x :: "GHC.Types.Int"
61:8-61:9::y :: "GHC.Types.Int"
61:21-61:28::lq_anf$##7205759403792804891 :: "{v : GHC.Types.Int | v == x + y}"
61:22-61:23::x :: "{v : GHC.Types.Int | v == x}"
61:26-61:27::y :: "{v : GHC.Types.Int | v == y}"
61:29-61:30::lq_anf$##7205759403792804893 :: "GHC.Types.Int"
62:1-62:5::Basic.Basic.avg3 :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
62:6-62:7::x :: "GHC.Types.Int"
62:8-62:9::y :: "GHC.Types.Int"
62:10-62:11::z :: "GHC.Types.Int"
62:21-62:32::lq_anf$##7205759403792804895 :: "GHC.Types.Int"
62:22-62:23::x :: "{v : GHC.Types.Int | v == x}"
62:26-62:27::y :: "{v : GHC.Types.Int | v == y}"
62:30-62:31::z :: "{v : GHC.Types.Int | v == z}"
62:33-62:34::lq_anf$##7205759403792804897 :: "GHC.Types.Int"
67:1-67:8::Basic.Basic.length' :: "forall a . x1:[a] -> {VV : GHC.Types.Int | VV == length' x1}"
67:14-67:15::lq_anf$##7205759403792804899 :: "{v : GHC.Prim.Int# | v == 0}"
68:18-68:19::lq_anf$##7205759403792804901 :: "GHC.Types.Int"
68:22-68:32::lq_anf$##7205759403792804902 :: "{v : GHC.Types.Int | v == length' xs}"
68:30-68:32::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
73:1-73:4::Basic.Basic.avg :: "{v : [GHC.Types.Int] | length' v > 0} -> GHC.Types.Int"
73:5-73:7::xs :: "{v : [GHC.Types.Int] | length' v > 0}"
73:10-73:24::Basic.Basic.divide :: "GHC.Types.Int -> {v : GHC.Types.Int | v /= 0} -> GHC.Types.Int"
73:17-73:22::total :: "{v : GHC.Types.Int | v == total}"
73:23-73:24::n :: "{v : GHC.Types.Int | v == n\n                     && v == length' xs}"
75:5-75:10::total :: "GHC.Types.Int"
75:13-75:19::_ :: "GHC.Types.Int"
75:17-75:19::xs :: "{v : [GHC.Types.Int] | v == xs\n                       && length' v > 0\n                       && len v >= 0}"
76:5-76:6::n :: "{v : GHC.Types.Int | v == length' xs}"
76:13-76:23::Basic.Basic.length' :: "forall a . x1:[a] -> {VV : GHC.Types.Int | VV == length' x1}"
76:21-76:23::xs :: "{v : [GHC.Types.Int] | v == xs\n                       && length' v > 0\n                       && len v >= 0}"
79:1-79:4::Basic.Basic.abs :: "GHC.Types.Int -> {VV : GHC.Types.Int | VV >= 0}"
79:5-79:6::n :: "GHC.Types.Int"
80:5-80:6::lq_anf$##7205759403792804924 :: "GHC.Types.Int"
80:9-80:10::n :: "{v : GHC.Types.Int | v == n}"
80:17-80:18::n :: "{v : GHC.Types.Int | v == n}"
81:17-81:18::lq_anf$##7205759403792804928 :: "GHC.Types.Int"
81:21-81:22::n :: "{v : GHC.Types.Int | v == n}"
85:1-85:5::Basic.Basic.calc :: "forall a . (GHC.Types.IO a)"
85:11-85:37::lq_anf$##7205759403792804914 :: "(GHC.Types.IO ())"
85:20-85:37::lq_anf$##7205759403792804913 :: "[GHC.Types.Char]"
86:11-86:12::n :: "GHC.Types.Int"
86:16-86:22::_ :: "(GHC.Types.IO GHC.Types.Int)"
87:11-87:39::lq_anf$##7205759403792804917 :: "(GHC.Types.IO ())"
87:20-87:39::lq_anf$##7205759403792804916 :: "[GHC.Types.Char]"
88:11-88:12::d :: "GHC.Types.Int"
88:16-88:22::_ :: "(GHC.Types.IO GHC.Types.Int)"
89:11-89:32::lq_anf$##7205759403792804919 :: "(GHC.Types.IO ())"
89:20-89:32::lq_anf$##7205759403792804918 :: "[GHC.Types.Char]"
89:28-89:29::n :: "{v : GHC.Types.Int | v == n}"
89:30-89:31::d :: "{v : GHC.Types.Int | v == d}"
90:11-90:15::lq_anf$##7205759403792804920 :: "(GHC.Types.IO a)"
92:1-92:7::Basic.Basic.result :: "GHC.Types.Int -> GHC.Types.Int -> [GHC.Types.Char]"
92:8-92:9::n :: "GHC.Types.Int"
92:10-92:11::d :: "GHC.Types.Int"
93:5-93:17::lq_anf$##7205759403792804905 :: "{v : GHC.Types.Bool | v <=> d > 0}"
93:16-93:17::d :: "{v : GHC.Types.Int | v == d}"
93:20-93:31::lq_anf$##7205759403792804909 :: "[GHC.Types.Char]"
93:35-93:54::lq_anf$##7205759403792804911 :: "[GHC.Types.Char]"
93:40-93:54::lq_anf$##7205759403792804910 :: "GHC.Types.Int"
93:41-93:42::n :: "{v : GHC.Types.Int | v == n}"
93:52-93:53::d :: "{v : GHC.Types.Int | v == d}"
94:20-94:63::lq_anf$##7205759403792804907 :: "{v : GHC.Prim.Addr# | v == \"Humph, please enter positive denominator!\"}"
97:1-97:11::Basic.Basic.isPositive :: "x1:GHC.Types.Int -> {v : GHC.Types.Bool | v <=> x1 > 0}"
97:12-97:13::x :: "GHC.Types.Int"
97:16-97:17::x :: "{v : GHC.Types.Int | v == x}"
97:20-97:21::lq_anf$##7205759403792804904 :: "GHC.Types.Int"
104:1-104:8::Basic.Basic.lAssert :: "forall a . GHC.Types.Bool -> a -> a"
104:15-104:16::x :: "a"
104:19-104:20::x :: "{VV : a | VV == x}"
105:19-105:48::Basic.Basic.die :: "{VV : forall a . {v : [GHC.Types.Char] | false} -> a | VV == die}"
105:23-105:48::lq_anf$##7205759403792804868 :: "[GHC.Types.Char]"
107:1-107:4::Basic.Basic.yes :: "()"
107:15-107:27::lq_anf$##7205759403792804873 :: "GHC.Types.Bool"
107:16-107:17::lq_anf$##7205759403792804869 :: "{v : GHC.Integer.Type.Integer | v == 1}"
107:20-107:21::lq_anf$##7205759403792804870 :: "{v : GHC.Integer.Type.Integer | v == 1}"
107:25-107:26::lq_anf$##7205759403792804872 :: "{v : GHC.Integer.Type.Integer | v == 2}"
107:28-107:30::GHC.Tuple.() :: "{v : () | v == ()}"
108:1-108:3::Basic.Basic.no :: "()"
108:15-108:27::lq_anf$##7205759403792804878 :: "GHC.Types.Bool"
108:16-108:17::lq_anf$##7205759403792804874 :: "{v : GHC.Integer.Type.Integer | v == 1}"
108:20-108:21::lq_anf$##7205759403792804875 :: "{v : GHC.Integer.Type.Integer | v == 1}"
108:25-108:26::lq_anf$##7205759403792804877 :: "{v : GHC.Integer.Type.Integer | v == 3}"
108:28-108:30::GHC.Tuple.() :: "{v : () | v == ()}"
111:1-111:9::Basic.Basic.truncate :: "GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int"
111:10-111:11::i :: "GHC.Types.Int"
111:12-111:15::max :: "GHC.Types.Int"
112:5-112:7::i' :: "{v : GHC.Types.Int | v == i'\n                     && v >= 0}"
112:11-112:15::max' :: "{v : GHC.Types.Int | v == max'\n                     && v >= 0}"
112:18-112:19::i :: "{v : GHC.Types.Int | v == i}"
113:18-113:22::max' :: "{v : GHC.Types.Int | v == max'\n                     && v >= 0}"
113:25-113:40::lq_anf$##7205759403792804931 :: "GHC.Types.Int"
113:26-113:27::i :: "{v : GHC.Types.Int | v == i}"
113:37-113:39::i' :: "{v : GHC.Types.Int | v == i'\n                     && v >= 0}"
115:7-115:9::i' :: "{v : GHC.Types.Int | v >= 0}"
115:18-115:23::_ :: "{v : GHC.Types.Int | v >= 0}"
115:22-115:23::i :: "{v : GHC.Types.Int | v == i}"
116:7-116:11::max' :: "{v : GHC.Types.Int | v >= 0}"
116:18-116:25::_ :: "{v : GHC.Types.Int | v >= 0}"
116:22-116:25::max :: "{v : GHC.Types.Int | v == max}"