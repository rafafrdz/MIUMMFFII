1:1-1:1::MeasureSets.Sets.$trModule :: "GHC.Types.Module"
8:1-8:5::MeasureSets.Sets.main :: "(GHC.Types.IO ())"
8:15-8:17::GHC.Tuple.() :: "{v : () | v == ()}"
11:1-11:4::MeasureSets.Sets.die :: "forall a . {v : [GHC.Types.Char] | false} -> a"
20:1-20:5::MeasureSets.Sets.elts :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {VV : (Data.Set.Internal.Set a) | VV == elts x2}"
20:15-20:20::_ :: "{VV : forall a .\n      {v : (Data.Set.Internal.Set a) | Set_emp v} | VV == empty}"
21:15-21:26::lq_anf$##7205759403792806675 :: "{v : (Data.Set.Internal.Set a) | v == Set_sng x}"
21:25-21:26::x :: "{VV : a | VV == x}"
21:35-21:42::lq_anf$##7205759403792806676 :: "{v : (Data.Set.Internal.Set a) | v == elts xs}"
21:40-21:42::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
36:1-36:8::MeasureSets.Sets.append' :: "forall a .\nx1:[a] -> x2:[a] -> {VV : [a] | elts VV == Set_cup (elts x1) (elts x2)}"
36:16-36:18::ys :: "[a]"
36:21-36:23::ys :: "{v : [a] | v == ys\n           && len v >= 0}"
37:21-37:22::x :: "{VV : a | VV == x}"
37:25-37:38::lq_anf$##7205759403792806683 :: "{v : [a] | elts v == Set_cup (elts xs) (elts ys)}"
37:33-37:35::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
37:36-37:38::ys :: "{v : [a] | v == ys\n           && len v >= 0}"
44:1-44:9::MeasureSets.Sets.reverse' :: "forall a . x1:[a] -> {VV : [a] | elts VV == elts x1}"
44:10-44:12::xs :: "[a]"
44:25-44:27::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && unique v\n                                                  && elts v == Set_empty 0\n                                                  && len v == 0} | VV == []}"
44:28-44:30::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
47:1-47:10::MeasureSets.Sets.revHelper :: "forall a .\nx1:[a] -> x2:[a] -> {VV : [a] | elts VV == Set_cup (elts x1) (elts x2)}"
47:11-47:14::acc :: "[a]"
47:24-47:27::acc :: "{v : [a] | v == acc\n           && len v >= 0}"
48:24-48:44::MeasureSets.Sets.revHelper :: "forall a .\nx1:[a] -> x2:[a] -> {VV : [a] | elts VV == Set_cup (elts x1) (elts x2)}"
48:34-48:41::lq_anf$##7205759403792806685 :: "{v : [a] | (unique v <=> unique acc\n                         && not (Set_mem x (elts acc)))\n           && elts v == Set_cup (Set_sng x) (elts acc)\n           && head v == x\n           && len v == 1 + len acc\n           && listElts v == Set_cup (Set_sng x) (listElts acc)\n           && tail v == acc}"
48:35-48:36::x :: "{VV : a | VV == x}"
48:37-48:40::acc :: "{v : [a] | v == acc\n           && len v >= 0}"
48:42-48:44::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
58:1-58:6::MeasureSets.Sets.halve :: "forall a .\nGHC.Types.Int -> x2:[a] -> {VV : ([a], [a]) | elts x2 == Set_cup (elts (fst VV)) (elts (snd VV))}"
58:9-58:11::xs :: "[a]"
58:20-58:28::lq_anf$##7205759403792806698 :: "{v : [a] | Set_emp (listElts v)\n           && unique v\n           && elts v == Set_empty 0\n           && len v == 0}"
58:21-58:23::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && unique v\n                                                  && elts v == Set_empty 0\n                                                  && len v == 0} | VV == []}"
58:25-58:27::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
59:20-59:32::GHC.Tuple.(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | fst v == x1\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"
59:21-59:22::x :: "{VV : a | VV == x}"
59:23-59:25::xs :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && Set_sub (elts v) (elts zs)\n           && v == xs\n           && len v >= 0}"
59:27-59:28::y :: "{VV : a | VV == y}"
59:29-59:31::ys :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && Set_sub (elts v) (elts zs)\n           && v == ys\n           && len v >= 0}"
59:40-59:42::xs :: "{VV : [a] | Set_sub (elts VV) (elts xs)\n            && Set_sub (elts VV) (elts zs)\n            && len VV >= 0}"
59:44-59:46::ys :: "{VV : [a] | Set_sub (elts VV) (elts xs)\n            && Set_sub (elts VV) (elts zs)\n            && len VV >= 0}"
59:50-59:64::MeasureSets.Sets.halve :: "forall a .\nGHC.Types.Int -> x2:[a] -> {VV : ([a], [a]) | elts x2 == Set_cup (elts (fst VV)) (elts (snd VV))}"
59:56-59:61::lq_anf$##7205759403792806695 :: "GHC.Types.Int"
59:57-59:58::ds_d3ma :: "GHC.Types.Int"
59:59-59:60::lq_anf$##7205759403792806694 :: "GHC.Types.Int"
59:62-59:64::zs :: "{v : [a] | v == zs\n           && len v >= 0}"
60:20-60:28::lq_anf$##7205759403792806692 :: "{v : [a] | Set_emp (listElts v)\n           && unique v\n           && elts v == Set_empty 0\n           && len v == 0}"
60:21-60:23::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && unique v\n                                                  && elts v == Set_empty 0\n                                                  && len v == 0} | VV == []}"
60:25-60:27::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
63:1-63:18::MeasureSets.Sets.prop_halve_append :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nGHC.Types.Int -> [a] -> {VV : GHC.Types.Bool | VV}"
63:19-63:20::n :: "GHC.Types.Int"
63:21-63:23::xs :: "[a]"
63:26-63:33::lq_anf$##7205759403792806701 :: "{v : (Data.Set.Internal.Set a) | v == elts xs}"
63:31-63:33::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
63:37-63:45::lq_anf$##7205759403792806702 :: "{v : (Data.Set.Internal.Set a) | v == elts xs'}"
63:42-63:45::xs' :: "{v : [a] | v == xs'\n           && elts v == Set_cup (elts ys) (elts zs)\n           && len v >= 0}"
65:5-65:8::xs' :: "{v : [a] | elts v == Set_cup (elts ys) (elts zs)}"
65:17-65:30::MeasureSets.Sets.append' :: "forall a .\nx1:[a] -> x2:[a] -> {VV : [a] | elts VV == Set_cup (elts x1) (elts x2)}"
65:25-65:27::ys :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && v == ys\n           && len v >= 0}"
65:28-65:30::zs :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && v == zs\n           && len v >= 0}"
66:6-66:8::ys :: "{VV : [a] | Set_sub (elts VV) (elts xs)\n            && len VV >= 0}"
66:10-66:12::zs :: "{VV : [a] | Set_sub (elts VV) (elts xs)\n            && len VV >= 0}"
66:17-66:27::MeasureSets.Sets.halve :: "forall a .\nGHC.Types.Int -> x2:[a] -> {VV : ([a], [a]) | elts x2 == Set_cup (elts (fst VV)) (elts (snd VV))}"
66:23-66:24::n :: "{v : GHC.Types.Int | v == n}"
66:25-66:27::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
74:1-74:5::MeasureSets.Sets.elem :: "forall a .\n(GHC.Classes.Eq<[]> a) =>\nx2:a -> x3:[a] -> {b : GHC.Types.Bool | b <=> Set_mem x2 (elts x3)}"
74:17-74:22::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
75:17-75:18::ds_d3lU :: "a"
75:22-75:23::y :: "{VV : a | VV == y}"
75:27-75:36::lq_anf$##7205759403792806705 :: "GHC.Types.Bool"
75:32-75:33::ds_d3lU :: "a"
75:34-75:36::ys :: "{v : [a] | v == ys\n           && len v >= 0}"
78:1-78:6::MeasureSets.Sets.test1 :: "{VV : GHC.Types.Bool | VV}"
78:19-78:20::lq_anf$##7205759403792806706 :: "{v : GHC.Integer.Type.Integer | v == 2}"
78:21-78:30::lq_anf$##7205759403792806713 :: "[GHC.Integer.Type.Integer]"
78:22-78:23::lq_anf$##7205759403792806707 :: "{v : GHC.Integer.Type.Integer | v == 1}"
78:25-78:26::lq_anf$##7205759403792806708 :: "{v : GHC.Integer.Type.Integer | v == 2}"
78:28-78:29::lq_anf$##7205759403792806709 :: "{v : GHC.Integer.Type.Integer | v == 3}"
81:1-81:6::MeasureSets.Sets.test2 :: "{VV : GHC.Types.Bool | not VV}"
81:19-81:20::lq_anf$##7205759403792806714 :: "{v : GHC.Integer.Type.Integer | v == 2}"
81:21-81:27::lq_anf$##7205759403792806719 :: "[GHC.Integer.Type.Integer]"
81:22-81:23::lq_anf$##7205759403792806715 :: "{v : GHC.Integer.Type.Integer | v == 1}"
81:25-81:26::lq_anf$##7205759403792806716 :: "{v : GHC.Integer.Type.Integer | v == 3}"
91:8-91:11::MeasureSets.Sets.>+< :: "forall a .\nx1:[a] -> x2:[a] -> {VV : [a] | elts VV == Set_cup (elts x1) (elts x2)}"
91:12-91:14::ys :: "[a]"
91:17-91:18::x :: "{VV : a | VV == x}"
91:21-91:32::lq_anf$##7205759403792806721 :: "{v : [a] | elts v == Set_cup (elts xs) (elts ys)}"
91:22-91:24::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
91:29-91:31::ys :: "{v : [a] | v == ys\n           && len v >= 0}"
92:13-92:15::ys :: "{v : [a] | v == ys\n           && len v >= 0}"
97:1-97:7::MeasureSets.Sets.halveP :: "forall a .\n(a -> GHC.Types.Bool) -> x3:[a] -> {VV : ([a], [a]) | elts x3 == Set_cup (elts (fst VV)) (elts (snd VV))}"
97:19-97:27::lq_anf$##7205759403792806724 :: "{v : [a] | Set_emp (listElts v)\n           && unique v\n           && elts v == Set_empty 0\n           && len v == 0}"
97:20-97:22::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && unique v\n                                                  && elts v == Set_empty 0\n                                                  && len v == 0} | VV == []}"
97:24-97:26::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && unique v\n                                                  && elts v == Set_empty 0\n                                                  && len v == 0} | VV == []}"
99:5-99:8::lq_anf$##7205759403792806725 :: "GHC.Types.Bool"
99:7-99:8::x :: "{VV : a | VV == x}"
99:22-99:32::GHC.Tuple.(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | fst v == x1\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"
99:23-99:24::x :: "{VV : a | VV == x}"
99:25-99:27::ys :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && v == ys\n           && len v >= 0}"
99:29-99:31::zs :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && v == zs\n           && len v >= 0}"
100:22-100:32::GHC.Tuple.(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | fst v == x1\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"
100:23-100:25::ys :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && v == ys\n           && len v >= 0}"
100:27-100:28::x :: "{VV : a | VV == x}"
100:29-100:31::zs :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && v == zs\n           && len v >= 0}"
102:6-102:8::ys :: "{VV : [a] | Set_sub (elts VV) (elts xs)\n            && len VV >= 0}"
102:10-102:12::zs :: "{VV : [a] | Set_sub (elts VV) (elts xs)\n            && len VV >= 0}"
102:22-102:33::MeasureSets.Sets.halveP :: "forall a .\n(a -> GHC.Types.Bool) -> x3:[a] -> {VV : ([a], [a]) | elts x3 == Set_cup (elts (fst VV)) (elts (snd VV))}"
102:29-102:30::ds_d3ku :: "a -> GHC.Types.Bool"
102:31-102:33::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
107:1-107:10::MeasureSets.Sets.quickSort :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {VV : [a] | elts VV == elts x2}"
107:20-107:22::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && unique v\n                                                  && elts v == Set_empty 0\n                                                  && len v == 0} | VV == []}"
108:20-108:32::lq_anf$##7205759403792806732 :: "{v : [a] | elts v == elts ls}"
108:30-108:32::ls :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && v == ls\n           && len v >= 0}"
108:38-108:39::x :: "{VV : a | VV == x}"
108:40-108:44::same :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && Set_sub (elts v) (elts xs')\n           && v == same\n           && len v >= 0}"
108:50-108:62::lq_anf$##7205759403792806733 :: "{v : [a] | elts v == elts gt}"
108:60-108:62::gt :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && Set_sub (elts v) (elts xs')\n           && v == gt\n           && len v >= 0}"
109:12-109:14::ls :: "{VV : [a] | Set_sub (elts VV) (elts xs)\n            && len VV >= 0}"
109:16-109:19::xs' :: "{VV : [a] | Set_sub (elts VV) (elts xs)\n            && len VV >= 0}"
109:27-109:42::lq_anf$##7205759403792806730 :: "x1:a -> {v : GHC.Types.Bool | v <=> x1 < x}"
109:34-109:39::_ :: "GHC.Types.Bool"
109:37-109:38::x :: "{VV : a | VV == x}"
109:40-109:42::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
110:12-110:14::gt :: "{VV : [a] | Set_sub (elts VV) (elts xs)\n            && Set_sub (elts VV) (elts xs')\n            && len VV >= 0}"
110:16-110:20::same :: "{VV : [a] | Set_sub (elts VV) (elts xs)\n            && Set_sub (elts VV) (elts xs')\n            && len VV >= 0}"
110:24-110:40::lq_anf$##7205759403792806731 :: "x1:a -> {v : GHC.Types.Bool | v <=> x1 > x}"
110:31-110:36::_ :: "GHC.Types.Bool"
110:34-110:35::x :: "{VV : a | VV == x}"
110:37-110:40::xs' :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && v == xs'\n           && len v >= 0}"
114:1-114:7::MeasureSets.Sets.unique :: "forall a .\n(GHC.Classes.Ord<[]> a) =>\nx2:[a] -> {VV : GHC.Types.Bool | VV <=> unique x2}"
114:17-114:21::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
115:17-115:26::lq_anf$##7205759403792806678 :: "{v : GHC.Types.Bool | v <=> unique xs}"
115:24-115:26::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
115:30-115:54::lq_anf$##7205759403792806681 :: "GHC.Types.Bool"
115:34-115:54::lq_anf$##7205759403792806680 :: "GHC.Types.Bool"
115:42-115:43::x :: "{VV : a | VV == x}"
115:44-115:53::lq_anf$##7205759403792806679 :: "{v : (Data.Set.Internal.Set a) | v == elts xs}"
115:50-115:52::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
126:1-126:8::MeasureSets.Sets.filter' :: "forall a .\n(a -> GHC.Types.Bool) -> x3:[a] -> {VV : [a] | Set_sub (elts VV) (elts x3)\n                                               && (unique x3 => unique VV)}"
126:18-126:20::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && unique v\n                                                  && elts v == Set_empty 0\n                                                  && len v == 0} | VV == []}"
128:5-128:8::lq_anf$##7205759403792806737 :: "GHC.Types.Bool"
128:7-128:8::x :: "{VV : a | VV == x}"
128:11-128:12::x :: "{VV : a | VV == x}"
128:15-128:18::xs' :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && (unique xs => unique v)\n           && v == xs'\n           && len v >= 0}"
129:17-129:20::xs' :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && (unique xs => unique v)\n           && v == xs'\n           && len v >= 0}"
131:5-131:8::xs' :: "{v : [a] | Set_sub (elts v) (elts xs)\n           && (unique xs => unique v)}"
131:11-131:23::MeasureSets.Sets.filter' :: "forall a .\n(a -> GHC.Types.Bool) -> x3:[a] -> {VV : [a] | Set_sub (elts VV) (elts x3)\n                                               && (unique x3 => unique VV)}"
131:19-131:20::ds_d3k6 :: "a -> GHC.Types.Bool"
131:21-131:23::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
134:1-134:6::MeasureSets.Sets.test3 :: "{VV : [GHC.Integer.Type.Integer] | unique VV}"
134:21-134:26::lq_anf$##7205759403792806739 :: "GHC.Integer.Type.Integer -> GHC.Types.Bool"
134:27-134:36::lq_anf$##7205759403792806748 :: "[GHC.Integer.Type.Integer]"
134:28-134:29::lq_anf$##7205759403792806740 :: "{v : GHC.Integer.Type.Integer | v == 1}"
134:30-134:31::lq_anf$##7205759403792806741 :: "{v : GHC.Integer.Type.Integer | v == 2}"
134:32-134:33::lq_anf$##7205759403792806742 :: "{v : GHC.Integer.Type.Integer | v == 3}"
134:34-134:35::lq_anf$##7205759403792806743 :: "{v : GHC.Integer.Type.Integer | v == 4}"
137:1-137:6::MeasureSets.Sets.test4 :: "[GHC.Integer.Type.Integer]"
137:21-137:26::lq_anf$##7205759403792806749 :: "GHC.Integer.Type.Integer -> GHC.Types.Bool"
137:27-137:36::lq_anf$##7205759403792806758 :: "[GHC.Integer.Type.Integer]"
137:28-137:29::lq_anf$##7205759403792806750 :: "{v : GHC.Integer.Type.Integer | v == 3}"
137:30-137:31::lq_anf$##7205759403792806751 :: "{v : GHC.Integer.Type.Integer | v == 1}"
137:32-137:33::lq_anf$##7205759403792806752 :: "{v : GHC.Integer.Type.Integer | v == 2}"
137:34-137:35::lq_anf$##7205759403792806753 :: "{v : GHC.Integer.Type.Integer | v == 3}"
144:1-144:8::MeasureSets.Sets.reverse :: "forall a . {VV : [a] | unique VV} -> {VV : [a] | unique VV}"
144:19-144:24::lq_anf$##7205759403792806761 :: "{v : [a] | Set_emp (listElts v)\n           && unique v\n           && elts v == Set_empty 0\n           && len v == 0}"
144:22-144:24::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | Set_emp (listElts v)\n                                                  && unique v\n                                                  && elts v == Set_empty 0\n                                                  && len v == 0} | VV == []}"
147:5-147:7::go :: "x1:{VV : [a] | unique VV} -> x2:{VV : [a] | unique VV\n                                            && Set_cap (elts VV) (elts x1) == Set_empty 0} -> {VV : [a] | unique VV\n                                                                                                          && len VV == len x1 + len x2\n                                                                                                          && Set_cup (elts x1) (elts x2) == elts VV}"
147:8-147:11::acc :: "{VV : [a] | unique VV}"
147:21-147:24::acc :: "{v : [a] | unique v\n           && v == acc\n           && len v >= 0}"
148:21-148:34::go :: "x1:{VV : [a] | unique VV} -> x2:{VV : [a] | unique VV\n                                            && Set_cap (elts VV) (elts x1) == Set_empty 0} -> {VV : [a] | unique VV\n                                                                                                          && len VV == len x1 + len x2\n                                                                                                          && Set_cup (elts x1) (elts x2) == elts VV}"
148:24-148:31::lq_anf$##7205759403792806760 :: "{v : [a] | (unique v <=> unique acc\n                         && not (Set_mem x (elts acc)))\n           && elts v == Set_cup (Set_sng x) (elts acc)\n           && head v == x\n           && len v == 1 + len acc\n           && listElts v == Set_cup (Set_sng x) (listElts acc)\n           && tail v == acc}"
148:25-148:26::x :: "{VV : a | VV == x}"
148:27-148:30::acc :: "{v : [a] | unique v\n           && v == acc\n           && len v >= 0}"
148:32-148:34::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
155:1-155:7::MeasureSets.Sets.append :: "forall a .\nx1:{VV : [a] | unique VV} -> x2:{VV : [a] | unique VV\n                                            && Set_cap (elts x1) (elts VV) == Set_empty 0} -> {VV : [a] | unique VV\n                                                                                                          && elts VV == Set_cup (elts x1) (elts x2)}"
155:15-155:17::ys :: "{VV : [a] | unique VV}"
155:20-155:22::ys :: "{v : [a] | unique v\n           && v == ys\n           && len v >= 0}"
156:20-156:21::x :: "{VV : a | VV == x}"
156:24-156:36::lq_anf$##7205759403792806763 :: "{v : [a] | unique v\n           && elts v == Set_cup (elts xs) (elts ys)}"
156:31-156:33::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
156:34-156:36::ys :: "{v : [a] | unique v\n           && v == ys\n           && len v >= 0}"