1:1-1:1::Lists_0.$trModule :: "GHC.Types.Module"
46:1-46:7::Lists_0.okList :: "(Lists_0.IncList GHC.Integer.Type.Integer)"
46:11-46:12::lq_anf$##7205759403792804739 :: "{v : GHC.Integer.Type.Integer | v == 1}"
46:16-46:17::lq_anf$##7205759403792804740 :: "{v : GHC.Integer.Type.Integer | v == 2}"
46:21-46:22::lq_anf$##7205759403792804741 :: "{v : GHC.Integer.Type.Integer | v == 3}"
46:26-46:29::_ :: "{VV : forall a . (Lists_0.IncList a) | VV == Emp}"
48:1-48:8::Lists_0.badList :: "(Lists_0.IncList GHC.Integer.Type.Integer)"
48:11-48:12::lq_anf$##7205759403792804745 :: "{v : GHC.Integer.Type.Integer | v == 2}"
48:16-48:17::lq_anf$##7205759403792804746 :: "{v : GHC.Integer.Type.Integer | v == 1}"
48:21-48:22::lq_anf$##7205759403792804747 :: "{v : GHC.Integer.Type.Integer | v == 3}"
48:26-48:29::_ :: "{VV : forall a . (Lists_0.IncList a) | VV == Emp}"
54:1-54:7::Lists_0.insert :: "forall a .\n(Ord<[]> a) =>\na -> (Lists_0.IncList a) -> (Lists_0.IncList a)"
54:8-54:9::y :: "a"
54:34-54:35::y :: "{VV : a | VV == y}"
54:39-54:42::_ :: "{VV : forall a . (Lists_0.IncList a) | VV == Emp}"
55:22-55:23::y :: "{VV : a | VV == y}"
55:28-55:29::x :: "{VV : a | VV == x}"
55:34-55:35::y :: "{VV : a | VV == y}"
55:39-55:40::x :: "{VV : a | VV == x}"
55:44-55:46::xs :: "{v : (Lists_0.IncList {VV : a | x <= VV}) | v == xs}"
56:34-56:35::x :: "{VV : a | VV == x}"
56:39-56:50::lq_anf$##7205759403792804755 :: "(Lists_0.IncList a)"
56:46-56:47::y :: "{VV : a | VV == y}"
56:48-56:50::xs :: "{v : (Lists_0.IncList {VV : a | x <= VV}) | v == xs}"
60:1-60:11::Lists_0.insertSort :: "forall a . (Ord<[]> a) => [a] -> (Lists_0.IncList a)"
60:21-60:24::_ :: "{VV : forall a . (Lists_0.IncList a) | VV == Emp}"
61:21-61:45::Lists_0.insert :: "forall a .\n(Ord<[]> a) =>\na -> (Lists_0.IncList a) -> (Lists_0.IncList a)"
61:28-61:29::x :: "{VV : a | VV == x}"
61:30-61:45::lq_anf$##7205759403792804758 :: "(Lists_0.IncList a)"
61:42-61:44::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
65:1-65:6::Lists_0.merge :: "forall a .\n(Ord<[]> a) =>\n(Lists_0.IncList a) -> (Lists_0.IncList a) -> (Lists_0.IncList a)"
65:17-65:19::ys :: "(Lists_0.IncList a)"
65:29-65:31::ys :: "{v : (Lists_0.IncList a) | v == ys}"
66:37-66:39::ds_d2Qz :: "(Lists_0.IncList a)"
68:5-68:6::ds_d2Rh :: "a"
68:10-68:11::y :: "{VV : a | VV == y}"
68:29-68:30::ds_d2Rh :: "a"
68:34-68:52::lq_anf$##7205759403792804766 :: "(Lists_0.IncList a)"
68:40-68:42::ds_d2Ri :: "(Lists_0.IncList a)"
68:43-68:52::lq_anf$##7205759403792804765 :: "{v : (Lists_0.IncList a) | hd v == y\n                           && tl v == ys}"
68:44-68:45::y :: "{VV : a | VV == y}"
68:49-68:51::ys :: "{v : (Lists_0.IncList {VV : a | y <= VV}) | v == ys}"
69:29-69:30::y :: "{VV : a | VV == y}"
69:34-69:52::lq_anf$##7205759403792804764 :: "(Lists_0.IncList a)"
69:40-69:49::lq_anf$##7205759403792804763 :: "(Lists_0.IncList a)"
69:41-69:42::ds_d2Rh :: "a"
69:46-69:48::ds_d2Ri :: "(Lists_0.IncList a)"
69:50-69:52::ys :: "{v : (Lists_0.IncList {VV : a | y <= VV}) | v == ys}"
73:1-73:10::Lists_0.mergeSort :: "forall a . (Ord<[]> a) => [a] -> (Lists_0.IncList a)"
73:20-73:23::_ :: "{VV : forall a . (Lists_0.IncList a) | VV == Emp}"
74:20-74:21::x :: "{VV : a | VV == x}"
74:25-74:28::_ :: "{VV : forall a . (Lists_0.IncList a) | VV == Emp}"
75:20-75:55::Lists_0.merge :: "forall a .\n(Ord<[]> a) =>\n(Lists_0.IncList a) -> (Lists_0.IncList a) -> (Lists_0.IncList a)"
75:26-75:40::lq_anf$##7205759403792804775 :: "(Lists_0.IncList a)"
75:37-75:39::ys :: "{v : [a] | v == ys\n           && len v >= 0}"
75:41-75:55::lq_anf$##7205759403792804776 :: "(Lists_0.IncList a)"
75:52-75:54::zs :: "{v : [a] | v == zs\n           && len v >= 0}"
76:10-76:12::ys :: "[a]"
76:14-76:16::zs :: "[a]"
76:20-76:28::_ :: "([a], [a])"
76:26-76:28::ds_d2Ro :: "{v : [a] | len v >= 0}"
77:9-77:14::split :: "[a] -> ([a], [a])"
77:27-77:39::GHC.Tuple.(,) :: "{VV : forall a b <p2 :: a b -> Bool>.\n      x1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | fst v == x1\n                                                                                           && snd v == x2\n                                                                                           && x_Tuple21 v == x1\n                                                                                           && x_Tuple22 v == x2} | VV == (,)}"
77:28-77:29::x :: "{VV : a | VV == x}"
77:30-77:32::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
77:34-77:35::y :: "{VV : a | VV == y}"
77:36-77:38::ys :: "{v : [a] | v == ys\n           && len v >= 0}"
78:20-78:22::xs :: "[a]"
78:23-78:25::ys :: "[a]"
78:29-78:37::split :: "[a] -> ([a], [a])"
78:35-78:37::zs :: "{v : [a] | v == zs\n           && len v >= 0}"
79:27-79:35::lq_anf$##7205759403792804772 :: "{v : [a] | not (notEmpty v)\n           && len v == 0}"
79:28-79:30::ds_d2S4 :: "{v : [a] | len v >= 0}"
79:32-79:34::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0} | VV == []}"
84:1-84:10::Lists_0.quickSort :: "forall a . (Ord<[]> a) => [a] -> (Lists_0.IncList a)"
84:20-84:23::_ :: "{VV : forall a . (Lists_0.IncList a) | VV == Emp}"
85:20-85:43::Lists_0.join :: "forall a .\na -> (Lists_0.IncList a) -> (Lists_0.IncList a) -> (Lists_0.IncList a)"
85:25-85:26::x :: "{VV : a | VV == x}"
85:27-85:34::lessers :: "{v : (Lists_0.IncList a) | v == lessers}"
85:35-85:43::greaters :: "{v : (Lists_0.IncList a) | v == greaters}"
86:9-86:16::lessers :: "(Lists_0.IncList a)"
86:20-86:51::Lists_0.quickSort :: "forall a . (Ord<[]> a) => [a] -> (Lists_0.IncList a)"
86:30-86:51::lq_anf$##7205759403792804792 :: "[a]"
86:31-86:32::ds_d2Qq :: "a"
86:40-86:42::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
86:44-86:45::ds_d2Qq :: "a"
86:48-86:49::x :: "{VV : a | VV == x}"
87:9-87:17::greaters :: "(Lists_0.IncList a)"
87:20-87:51::Lists_0.quickSort :: "forall a . (Ord<[]> a) => [a] -> (Lists_0.IncList a)"
87:30-87:51::lq_anf$##7205759403792804787 :: "[a]"
87:31-87:32::ds_d2Qu :: "a"
87:40-87:42::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
87:44-87:45::ds_d2Qu :: "a"
87:49-87:50::x :: "{VV : a | VV == x}"
93:1-93:5::Lists_0.join :: "forall a .\na -> (Lists_0.IncList a) -> (Lists_0.IncList a) -> (Lists_0.IncList a)"
93:6-93:7::z :: "a"
93:18-93:20::ys :: "(Lists_0.IncList a)"
93:23-93:24::z :: "{VV : a | VV == z}"
93:28-93:30::ys :: "{v : (Lists_0.IncList a) | v == ys}"
94:23-94:24::x :: "{VV : a | VV == x}"
94:28-94:40::lq_anf$##7205759403792804781 :: "(Lists_0.IncList a)"
94:33-94:34::z :: "{VV : a | VV == z}"
94:35-94:37::xs :: "{v : (Lists_0.IncList {VV : a | x <= VV}) | v == xs}"
94:38-94:40::ys :: "{v : (Lists_0.IncList a) | v == ys}"
103:1-103:9::Lists_0.notEmpty :: "forall a . x1:[a] -> {VV : GHC.Types.Bool | VV <=> notEmpty x1}"
103:18-103:23::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
104:18-104:22::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
110:1-110:5::Lists_0.head :: "forall a . {VV : [a] | notEmpty VV} -> a"
110:14-110:15::x :: "{VV : a | VV == x}"
113:1-113:2::Lists_0.h :: "forall a . a"
113:10-113:12::_ :: "{VV : forall a <p :: a a -> Bool>.\n      {v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | not (notEmpty v)\n                                                  && len v == 0} | VV == []}"