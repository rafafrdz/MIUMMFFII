1:1-1:1::Scratch.Sample1.$trModule :: "GHC.Types.Module"
9:1-9:4::Scratch.Sample1.die :: "forall a . {VV : [GHC.Types.Char] | false} -> a"
9:5-9:8::msg :: "{VV : [GHC.Types.Char] | false}"
9:17-9:20::msg :: "{v : [GHC.Types.Char] | false}"
13:1-13:5::Scratch.Sample1.size :: "forall a . x1:[a] -> {VV : GHC.Types.Int | VV == size x1}"
13:11-13:12::lq_anf$##7205759403792804171 :: "{v : GHC.Prim.Int# | v == 0}"
14:15-14:16::lq_anf$##7205759403792804173 :: "GHC.Types.Int"
14:19-14:26::lq_anf$##7205759403792804174 :: "{v : GHC.Types.Int | v == size xs}"
14:24-14:26::xs :: "{v : [a] | v == xs\n           && len v >= 0}"
23:1-23:5::Scratch.Sample1.algo :: "{VV : [GHC.Types.Int] | 0 < size VV}"
23:9-23:10::lq_anf$##7205759403792804176 :: "GHC.Types.Int"
23:11-23:12::lq_anf$##7205759403792804178 :: "GHC.Types.Int"
23:13-23:14::lq_anf$##7205759403792804180 :: "GHC.Types.Int"
23:16-23:17::lq_anf$##7205759403792804182 :: "GHC.Types.Int"
23:19-23:20::lq_anf$##7205759403792804184 :: "GHC.Types.Int"
39:1-39:15::Scratch.Sample1.isNonSkewEmpty :: "forall a .\n(Ord<[]> a) =>\nx2:(Scratch.Sample1.SkewH a) -> {VV : GHC.Types.Bool | VV <=> isNonSkewEmpty x2}"
39:24-39:29::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
40:25-40:29::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
48:1-48:7::Scratch.Sample1.getKey :: "forall a .\n(Ord<[]> a) =>\nx2:{VV : (Scratch.Sample1.SkewH a) | isNonSkewEmpty VV} -> {VV : a | VV == getKey x2}"
48:23-48:24::k :: "{VV : a | VV == k}"
54:1-54:11::Scratch.Sample1.refineSkew :: "forall a .\n(Ord<[]> a) =>\nx2:(Scratch.Sample1.SkewH a) -> (Scratch.Sample1.SkewH {VV : a | getKey x2 <= VV})"
54:27-54:39::Scratch.Sample1.Skew :: "{VV : forall a .\n      x1:a -> x2:(Scratch.Sample1.SkewH {VV : a | x1 <= VV}) -> x3:(Scratch.Sample1.SkewH {VV : a | x1 <= VV}) -> {v : (Scratch.Sample1.SkewH a) | isNonSkewEmpty v\n                                                                                                                                                   && getKey v == x1\n                                                                                                                                                   && sLeft v == x2\n                                                                                                                                                   && sRight v == x3\n                                                                                                                                                   && sk v == x1} | VV == Skew}"
54:33-54:34::a :: "{VV : a | VV == a}"
54:35-54:36::b :: "{v : (Scratch.Sample1.SkewH {VV : a | a <= VV}) | v == b}"
54:37-54:38::c :: "{v : (Scratch.Sample1.SkewH {VV : a | a <= VV}) | v == c}"
55:20-55:25::_ :: "{VV : forall a .\n      {v : (Scratch.Sample1.SkewH a) | not (isNonSkewEmpty v)} | VV == Empty}"
59:1-59:7::Scratch.Sample1.joinSk :: "forall a .\n(Ord<[]> a) =>\n(Scratch.Sample1.SkewH a) -> (Scratch.Sample1.SkewH a) -> (Scratch.Sample1.SkewH a)"
59:22-59:27::_ :: "{VV : forall a .\n      {v : (Scratch.Sample1.SkewH a) | not (isNonSkewEmpty v)} | VV == Empty}"
60:19-60:21::ds_d2HL :: "(Scratch.Sample1.SkewH a)"
61:26-61:28::ds_d2HK :: "(Scratch.Sample1.SkewH a)"
63:5-63:7::ds_d2IT :: "a"
63:11-63:13::k2 :: "{VV : a | VV == k2}"
63:16-63:56::Scratch.Sample1.Skew :: "{VV : forall a .\n      x1:a -> x2:(Scratch.Sample1.SkewH {VV : a | x1 <= VV}) -> x3:(Scratch.Sample1.SkewH {VV : a | x1 <= VV}) -> {v : (Scratch.Sample1.SkewH a) | isNonSkewEmpty v\n                                                                                                                                                   && getKey v == x1\n                                                                                                                                                   && sLeft v == x2\n                                                                                                                                                   && sRight v == x3\n                                                                                                                                                   && sk v == x1} | VV == Skew}"
63:21-63:23::ds_d2IT :: "a"
63:24-63:52::lq_anf$##7205759403792804203 :: "(Scratch.Sample1.SkewH a)"
63:32-63:35::ds_d2IV :: "(Scratch.Sample1.SkewH a)"
63:36-63:51::lq_anf$##7205759403792804202 :: "(Scratch.Sample1.SkewH a)"
63:48-63:50::ds_d2HL :: "(Scratch.Sample1.SkewH a)"
63:53-63:56::ds_d2IU :: "(Scratch.Sample1.SkewH a)"
64:17-64:29::Scratch.Sample1.joinSk :: "forall a .\n(Ord<[]> a) =>\n(Scratch.Sample1.SkewH a) -> (Scratch.Sample1.SkewH a) -> (Scratch.Sample1.SkewH a)"
64:24-64:26::ds_d2HL :: "(Scratch.Sample1.SkewH a)"
64:27-64:29::ds_d2HK :: "(Scratch.Sample1.SkewH a)"