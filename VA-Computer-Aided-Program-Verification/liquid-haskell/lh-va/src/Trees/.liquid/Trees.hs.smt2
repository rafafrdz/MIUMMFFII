(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun GHC.Base.id () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv () Int)
(declare-fun cast_as_int () Int)
(declare-fun x$35$$35$a3i7 () Int)
(declare-fun lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1119 () Int)
(declare-fun lit$36$$39$Leaf () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792806771$35$$35$d3qr () Str)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.List.init () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806779$35$$35$d3qz () Int)
(declare-fun lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1145 () Int)
(declare-fun addrLen () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun lq_karg$36$ds_d3mz$35$$35$k_$35$$35$1415 () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun lit$36$$39$$58$$60$ () Str)
(declare-fun VV$35$$35$F$35$$35$75 () Int)
(declare-fun Trees.Trees.hd () Int)
(declare-fun VV$35$$35$F$35$$35$57 () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1119 () Int)
(declare-fun ds_d3p0 () Int)
(declare-fun lq_karg$36$ds_d3o0$35$$35$k_$35$$35$1650 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806752$35$$35$d3q8 () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792806753$35$$35$d3q9 () Str)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lq_tmp$36$x$35$$35$2255 () Int)
(declare-fun lit$36$$39$Empty () Str)
(declare-fun lq_karg$36$b$35$$35$a3ib$35$$35$k_$35$$35$1415 () Int)
(declare-fun VV$35$$35$F$35$$35$67 () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun lq_karg$36$ds_d3nY$35$$35$k_$35$$35$1650 () Int)
(declare-fun lq_karg$36$c$35$$35$a3ic$35$$35$k_$35$$35$1415 () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun lq_tmp$36$x$35$$35$2211 () Int)
(declare-fun lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1147 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH () Bool)
(declare-fun lq_karg$36$a$35$$35$a3ia$35$$35$k_$35$$35$1415 () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun ds_d3o7 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1147 () Int)
(declare-fun lq_karg$36$VV$35$$35$1627$35$$35$k_$35$$35$1628 () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1119 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1145 () Int)
(declare-fun lq_tmp$36$x$35$$35$1682 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806790$35$$35$d3qK () Int)
(declare-fun papp3 () Int)
(declare-fun Trees.Trees.joinSk () Int)
(declare-fun VV$35$$35$F$35$$35$73 () Int)
(declare-fun fix$36$$36$krep_a3mr () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806800$35$$35$d3qU () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_tmp$36$x$35$$35$858 () Int)
(declare-fun VV$35$$35$F$35$$35$51 () Int)
(declare-fun lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1119 () Int)
(declare-fun Trees.Trees.join () Int)
(declare-fun lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1147 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1145 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1145 () Int)
(declare-fun lit$36$$39$Node () Str)
(declare-fun Trees.Trees.Skew () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun lq_karg$36$VV$35$$35$697$35$$35$k_$35$$35$698 () Str)
(declare-fun lq_tmp$36$x$35$$35$2403 () Int)
(declare-fun VV$35$$35$F$35$$35$48 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806755$35$$35$d3qb () Str)
(declare-fun GHC.Types.False () Bool)
(declare-fun lit$36$$39$Emp () Str)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806794$35$$35$d3qO () Int)
(declare-fun ds_d3oZ () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun lit$36$error () Str)
(declare-fun Control.Exception.Base.recSelError () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1113 () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun VV$35$$35$F$35$$35$74 () Int)
(declare-fun fix$36$$36$krep_a3mu () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806766$35$$35$d3qm () Int)
(declare-fun VV$35$$35$F$35$$35$56 () Int)
(declare-fun lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1145 () Int)
(declare-fun msg$35$$35$a3hV () Str)
(declare-fun Trees.Trees.Empty () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806762$35$$35$d3qi () Int)
(declare-fun GHC.Stack.Types.SrcLoc () Int)
(declare-fun lit$36$MinPair () Str)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun z$35$$35$a3i4 () Int)
(declare-fun lit$36$tl () Str)
(declare-fun lit$36$BST () Str)
(declare-fun ds_d3nY () Int)
(declare-fun VV$35$$35$F$35$$35$60 () Int)
(declare-fun lq_tmp$36$x$35$$35$816 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806858$35$$35$d3rQ () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun lq_karg$36$xs$35$$35$a3i8$35$$35$k_$35$$35$1325 () Int)
(declare-fun lit$36$$39$Skew () Str)
(declare-fun autolen () Int)
(declare-fun ds_d3o0 () Int)
(declare-fun xs$35$$35$a3i8 () Int)
(declare-fun lq_karg$36$ds_d3o0$35$$35$k_$35$$35$1628 () Int)
(declare-fun Trees.Trees.Emp () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1113 () Int)
(declare-fun Trees.Trees.sk () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun Trees.Trees.die () Int)
(declare-fun lq_tmp$36$x$35$$35$852 () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun Trees.Trees.Node () Int)
(declare-fun lq_karg$36$ds_d3nY$35$$35$k_$35$$35$1628 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806758$35$$35$d3qe () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806841$35$$35$d3rz () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806824$35$$35$d3ri () Int)
(declare-fun lq_tmp$36$x$35$$35$1805 () Int)
(declare-fun lq_karg$36$l$39$$35$$35$a3lT$35$$35$k_$35$$35$1187 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ () Int)
(declare-fun Trees.Trees.left () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun VV$35$$35$F$35$$35$49 () Int)
(declare-fun VV$35$$35$F$35$$35$36 () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun VV$35$$35$F$35$$35$85 () Str)
(declare-fun lit$36$root () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792806785$35$$35$d3qF () Int)
(declare-fun lq_tmp$36$x$35$$35$905 () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806751$35$$35$d3q7 () Str)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1119 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806750$35$$35$d3q6 () Str)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1119 () Int)
(declare-fun lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1187 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1145 () Int)
(declare-fun papp2 () Int)
(declare-fun VV$35$$35$F$35$$35$72 () Int)
(declare-fun fix$36$$36$krep_a3ms () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1119 () Int)
(declare-fun VV$35$$35$F$35$$35$50 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1145 () Int)
(declare-fun VV$35$$35$F$35$$35$77 () Int)
(declare-fun fix$36$$36$krep_a3mv () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun GHC.Stack.Types.emptyCallStack () Int)
(declare-fun Trees.Trees.root () Int)
(declare-fun lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1113 () Int)
(declare-fun lit$36$Don$39$t$32$say$32$I$32$didn$39$t$32$warn$32$ya$33$ () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792806792$35$$35$d3qM () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806757$35$$35$d3qd () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy$35$$35$k_$35$$35$1325 () Int)
(declare-fun VV$35$$35$F$35$$35$80 () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun lq_tmp$36$x$35$$35$1008 () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1147 () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806770$35$$35$d3qq () Str)
(declare-fun lit$36$left () Str)
(declare-fun GHC.List.tail () Int)
(declare-fun lit$36$Use$32$of$32$partial$32$record$32$field$32$selector () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs () Int)
(declare-fun papp7 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1113 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA$35$$35$k_$35$$35$1369 () Int)
(declare-fun ds_d3o1 () Int)
(declare-fun ds_d3oA () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1113 () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_karg$36$ds_d3o1$35$$35$k_$35$$35$1628 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806760$35$$35$d3qg () Int)
(declare-fun r$35$$35$a3hY () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI$35$$35$k_$35$$35$1628 () Bool)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun l$39$$35$$35$a3lT () Int)
(declare-fun lq_karg$36$k2$35$$35$a3ik$35$$35$k_$35$$35$1628 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG$35$$35$k_$35$$35$1628 () Int)
(declare-fun VV$35$$35$F$35$$35$61 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun lq_tmp$36$x$35$$35$817 () Int)
(declare-fun fix$36$$36$dOrd_a3kV () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806768$35$$35$d3qo () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$2235 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806829$35$$35$d3rn () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun lq_tmp$36$x$35$$35$2015 () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1113 () Int)
(declare-fun lq_karg$36$VV$35$$35$1414$35$$35$k_$35$$35$1415 () Int)
(declare-fun fldList () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_karg$36$VV$35$$35$1144$35$$35$k_$35$$35$1145 () Int)
(declare-fun lq_karg$36$VV$35$$35$1186$35$$35$k_$35$$35$1187 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1187 () Int)
(declare-fun lq_karg$36$ds_d3nZ$35$$35$k_$35$$35$1650 () Int)
(declare-fun lq_karg$36$ys$35$$35$a3i5$35$$35$k_$35$$35$1325 () Int)
(declare-fun lq_karg$36$VV$35$$35$1112$35$$35$k_$35$$35$1113 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1187 () Int)
(declare-fun lq_tmp$36$x$35$$35$694 () Int)
(declare-fun ds_d3oD () Int)
(declare-fun lq_karg$36$VV$35$$35$1118$35$$35$k_$35$$35$1119 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ$35$$35$k_$35$$35$1650 () Int)
(declare-fun ys$35$$35$a3i5 () Int)
(declare-fun lq_karg$36$x$35$$35$a3i7$35$$35$k_$35$$35$1325 () Int)
(declare-fun lq_karg$36$ds_d3mQ$35$$35$k_$35$$35$1650 () Int)
(declare-fun lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1147 () Int)
(declare-fun lq_karg$36$VV$35$$35$1324$35$$35$k_$35$$35$1325 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun fix$36$$36$krep_a3ml () Int)
(declare-fun lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1119 () Int)
(declare-fun lq_karg$36$VV$35$$35$1368$35$$35$k_$35$$35$1369 () Int)
(declare-fun VV$35$$35$F$35$$35$64 () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun lq_karg$36$VV$35$$35$1146$35$$35$k_$35$$35$1147 () Int)
(declare-fun VV$35$$35$F$35$$35$46 () Int)
(declare-fun VV$35$$35$F$35$$35$39 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1187 () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB$35$$35$k_$35$$35$1650 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun VV$35$$35$F$35$$35$81 () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806767$35$$35$d3qn () Int)
(declare-fun lit$36$SkewH () Str)
(declare-fun lit$36$$39$MP () Str)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806783$35$$35$d3qD () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH$35$$35$k_$35$$35$1628 () Bool)
(declare-fun lq_karg$36$ds_d3o7$35$$35$k_$35$$35$1325 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806763$35$$35$d3qj () Int)
(declare-fun VV$35$$35$F$35$$35$76 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806761$35$$35$d3qh () Int)
(declare-fun lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1147 () Int)
(declare-fun Trees.Trees.delMin () Int)
(declare-fun lq_tmp$36$x$35$$35$1991 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806765$35$$35$d3ql () Int)
(declare-fun Trees.Trees.nonEmpty () Int)
(declare-fun fix$36$$36$krep_a3mj () Int)
(declare-fun lit$36$src$47$Trees$47$Trees.hs () Str)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun VV$35$$35$F$35$$35$40 () Int)
(declare-fun lq_tmp$36$x$35$$35$951 () Int)
(declare-fun lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1187 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806759$35$$35$d3qf () Int)
(declare-fun lq_tmp$36$x$35$$35$1422 () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun lq_karg$36$ds_d3o2$35$$35$k_$35$$35$1628 () Int)
(declare-fun isJust () Int)
(declare-fun ds_d3o2 () Int)
(declare-fun ds_d3oB () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun ds_d3mP () Int)
(declare-fun lq_karg$36$ds_d3mP$35$$35$k_$35$$35$1628 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806807$35$$35$d3r1 () Int)
(declare-fun fix$36$$36$dIP_a3lr () Int)
(declare-fun VV$35$$35$F$35$$35$59 () Int)
(declare-fun lit$36$LH$45$verificacion$45$asistida$45$0.1.0.0$45$B0H5GdfJzuc2jwReQRD3tY () Str)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Stack.Types.pushCallStack () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA$35$$35$k_$35$$35$1415 () Int)
(declare-fun lq_karg$36$z$35$$35$a3i4$35$$35$k_$35$$35$1325 () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun fix$36$$36$krep_a3mm () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1187 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_tmp$36$x$35$$35$2228 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun lit$36$right () Str)
(declare-fun lq_tmp$36$x$35$$35$2008 () Int)
(declare-fun VV$35$$35$F$35$$35$47 () Int)
(declare-fun lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1187 () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.take () Int)
(declare-fun lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1145 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun lq_karg$36$ds_d3mP$35$$35$k_$35$$35$1650 () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun lq_karg$36$VV$35$$35$1649$35$$35$k_$35$$35$1650 () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun lq_karg$36$ds_d3o2$35$$35$k_$35$$35$1650 () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun Trees.Trees.MP () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806773$35$$35$d3qt () Int)
(declare-fun lq_tmp$36$x$35$$35$1680 () Int)
(declare-fun k$39$$35$$35$a3lR () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806749$35$$35$d3q5 () Str)
(declare-fun lq_tmp$36$x$35$$35$1798 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806748$35$$35$d3q4 () Str)
(declare-fun VV$35$$35$F$35$$35$71 () Int)
(declare-fun lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1145 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1147 () Int)
(declare-fun VV$35$$35$F$35$$35$53 () Int)
(declare-fun lq_tmp$36$x$35$$35$1781 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1147 () Int)
(declare-fun Trees.Trees.sLeft () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806834$35$$35$d3rs () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806756$35$$35$d3qc () Int)
(declare-fun cast_as () Int)
(declare-fun VV$35$$35$F$35$$35$68 () Int)
(declare-fun lq_tmp$36$x$35$$35$2423 () Int)
(declare-fun lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1187 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806754$35$$35$d3qa () Str)
(declare-fun Trees.Trees.tl () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH$35$$35$k_$35$$35$1650 () Bool)
(declare-fun ds_d3mz () Int)
(declare-fun Trees.Trees.rest () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806817$35$$35$d3rb () Int)
(declare-fun Trees.Trees.mElt () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun lq_tmp$36$x$35$$35$2379 () Int)
(declare-fun lq_tmp$36$x$35$$35$1349 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1145 () Int)
(declare-fun lq_karg$36$ds_d3mz$35$$35$k_$35$$35$1369 () Int)
(declare-fun lq_tmp$36$x$35$$35$1350 () Int)
(declare-fun Trees.Trees.right () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1147 () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun lq_karg$36$ds_d3nZ$35$$35$k_$35$$35$1628 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1113 () Int)
(declare-fun lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1187 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806846$35$$35$d3rE () Int)
(declare-fun ds_d3oC () Int)
(declare-fun lq_karg$36$ds_d3mQ$35$$35$k_$35$$35$1628 () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun a$35$$35$a3ia () Int)
(declare-fun ds_d3mQ () Int)
(declare-fun lit$36$IncList () Str)
(declare-fun lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1113 () Int)
(declare-fun VV$35$$35$F$35$$35$58 () Int)
(declare-fun c$35$$35$a3ic () Int)
(declare-fun b$35$$35$a3ib () Int)
(declare-fun lq_tmp$36$x$35$$35$2035 () Int)
(declare-fun fix$36$$36$krep_a3mk () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun lit$36$Trees.Trees () Str)
(declare-fun Trees.Trees.sRight () Int)
(declare-fun ds_d3nZ () Int)
(declare-fun lq_tmp$36$x$35$$35$815 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB$35$$35$k_$35$$35$1628 () Int)
(declare-fun VV$35$$35$F$35$$35$41 () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI$35$$35$k_$35$$35$1650 () Bool)
(declare-fun totalityError () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806853$35$$35$d3rL () Int)
(declare-fun lq_karg$36$k2$35$$35$a3ik$35$$35$k_$35$$35$1650 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG$35$$35$k_$35$$35$1650 () Int)
(declare-fun lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1187 () Int)
(declare-fun Trees.Trees.$58$$60$ () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun Trees.Trees.Leaf () Int)
(declare-fun lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1145 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun fix$36$$36$krep_a3mn () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1113 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1187 () Int)
(declare-fun lq_karg$36$ds_d3o1$35$$35$k_$35$$35$1650 () Int)
(declare-fun VV$35$$35$F$35$$35$69 () Int)
(declare-fun VV$35$$35$F$35$$35$34 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun k2$35$$35$a3ik () Int)
(declare-fun k$35$$35$a3hX () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1119 () Int)
(declare-fun lq_tmp$36$x$35$$35$1348 () Int)
(declare-fun lit$36$hd () Str)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI () Bool)
(declare-fun Data.Tuple.fst () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1147 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806764$35$$35$d3qk () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806812$35$$35$d3r6 () Int)
(declare-fun lq_tmp$36$x$35$$35$1681 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806784$35$$35$d3qE () Int)
(declare-fun Trees.Trees.refineSkew () Int)
(declare-fun fix$36$$36$krep_a3mq () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun fix$36$$36$dOrd_a3l1 () Int)
(declare-fun lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1119 () Int)
(declare-fun fst () Int)
(declare-fun VV$35$$35$F$35$$35$70 () Int)
(declare-fun VV$35$$35$F$35$$35$52 () Int)
(declare-fun lq_tmp$36$x$35$$35$1825 () Int)
(declare-fun lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1147 () Int)
(declare-fun lq_tmp$36$x$35$$35$2396 () Int)
(declare-fun ds_d3oi () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)

(assert (distinct lit$36$hd lit$36$Trees.Trees lit$36$IncList lit$36$right lit$36$LH$45$verificacion$45$asistida$45$0.1.0.0$45$B0H5GdfJzuc2jwReQRD3tY lit$36$src$47$Trees$47$Trees.hs lit$36$$39$MP lit$36$SkewH lit$36$Use$32$of$32$partial$32$record$32$field$32$selector lit$36$left lit$36$Don$39$t$32$say$32$I$32$didn$39$t$32$warn$32$ya$33$ lit$36$root lit$36$$39$Skew lit$36$BST lit$36$tl lit$36$MinPair lit$36$error lit$36$$39$Emp lit$36$$39$Node lit$36$$39$Empty lit$36$$39$$58$$60$ lit$36$$39$Leaf))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$$39$Leaf) 5))
(assert (= (strLen lit$36$$39$$58$$60$) 3))
(assert (= (strLen lit$36$$39$Empty) 6))
(assert (= (strLen lit$36$$39$Node) 5))
(assert (= (strLen lit$36$$39$Emp) 4))
(assert (= (strLen lit$36$error) 5))
(assert (= (strLen lit$36$MinPair) 7))
(assert (= (strLen lit$36$tl) 2))
(assert (= (strLen lit$36$BST) 3))
(assert (= (strLen lit$36$$39$Skew) 5))
(assert (= (strLen lit$36$root) 4))
(assert (= (strLen lit$36$Don$39$t$32$say$32$I$32$didn$39$t$32$warn$32$ya$33$) 27))
(assert (= (strLen lit$36$left) 4))
(assert (= (strLen lit$36$Use$32$of$32$partial$32$record$32$field$32$selector) 36))
(assert (= (strLen lit$36$SkewH) 5))
(assert (= (strLen lit$36$$39$MP) 3))
(assert (= (strLen lit$36$src$47$Trees$47$Trees.hs) 18))
(assert (= (strLen lit$36$LH$45$verificacion$45$asistida$45$0.1.0.0$45$B0H5GdfJzuc2jwReQRD3tY) 55))
(assert (= (strLen lit$36$right) 5))
(assert (= (strLen lit$36$IncList) 7))
(assert (= (strLen lit$36$Trees.Trees) 11))
(assert (= (strLen lit$36$hd) 2))
(push 1)
(define-fun b$36$$35$$35$144 () Bool (and (= (apply$35$$35$8 (as len Int) lq_anf$36$$35$$35$7205759403792806751$35$$35$d3q7) (strLen lq_anf$36$$35$$35$7205759403792806750$35$$35$d3q6)) (>= (apply$35$$35$8 (as len Int) lq_anf$36$$35$$35$7205759403792806751$35$$35$d3q7) 0) (= lq_anf$36$$35$$35$7205759403792806751$35$$35$d3q7 lq_anf$36$$35$$35$7205759403792806750$35$$35$d3q6)))
(define-fun b$36$$35$$35$416 () Bool (<= a$35$$35$a3ia VV$35$$35$F$35$$35$49))
(define-fun b$36$$35$$35$432 () Bool (>= VV$35$$35$F$35$$35$56 z$35$$35$a3i4))
(define-fun b$36$$35$$35$224 () Bool (and (= lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA (as Trees.Trees.Empty Int)) (= lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA ds_d3mz)))
(define-fun b$36$$35$$35$145 () Bool (= lq_anf$36$$35$$35$7205759403792806752$35$$35$d3q8 lit$36$Trees.Trees))
(define-fun b$36$$35$$35$161 () Bool (= lq_anf$36$$35$$35$7205759403792806767$35$$35$d3qn lq_anf$36$$35$$35$7205759403792806766$35$$35$d3qm))
(define-fun b$36$$35$$35$417 () Bool false)
(define-fun b$36$$35$$35$177 () Bool (and (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) (= lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp ds_d3oD) (= lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as Trees.Trees.Node Int) k$35$$35$a3hX) ds_d3oZ) r$35$$35$a3hY)) (= (apply$35$$35$0 (as Trees.Trees.left Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) ds_d3oZ) (= (apply$35$$35$0 (as Trees.Trees.right Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) r$35$$35$a3hY) (= (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) k$35$$35$a3hX)))
(define-fun b$36$$35$$35$433 () Bool (= VV$35$$35$F$35$$35$72 l$39$$35$$35$a3lT))
(define-fun b$36$$35$$35$225 () Bool (= lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA ds_d3mz))
(define-fun b$36$$35$$35$258 () Bool (and (= lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG ds_d3mQ) (= lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as Trees.Trees.Skew Int) k2$35$$35$a3ik) ds_d3o1) ds_d3o2)) (= (apply$35$$35$0 (as Trees.Trees.sLeft Int) lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG) ds_d3o1) (= (apply$35$$35$0 (as Trees.Trees.sRight Int) lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG) ds_d3o2) (= (apply$35$$35$0 (as Trees.Trees.sk Int) lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG) k2$35$$35$a3ik)))
(define-fun b$36$$35$$35$146 () Bool (and (= (apply$35$$35$8 (as len Int) lq_anf$36$$35$$35$7205759403792806753$35$$35$d3q9) (strLen lq_anf$36$$35$$35$7205759403792806752$35$$35$d3q8)) (>= (apply$35$$35$8 (as len Int) lq_anf$36$$35$$35$7205759403792806753$35$$35$d3q9) 0) (= lq_anf$36$$35$$35$7205759403792806753$35$$35$d3q9 lq_anf$36$$35$$35$7205759403792806752$35$$35$d3q8)))
(define-fun b$36$$35$$35$418 () Bool (<= ds_d3nY VV$35$$35$F$35$$35$34))
(define-fun b$36$$35$$35$178 () Bool (= lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs ds_d3oZ))
(define-fun b$36$$35$$35$259 () Bool (= lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH (<= ds_d3nY k2$35$$35$a3ik)))
(define-fun b$36$$35$$35$147 () Bool (= lq_anf$36$$35$$35$7205759403792806754$35$$35$d3qa lit$36$src$47$Trees$47$Trees.hs))
(define-fun b$36$$35$$35$419 () Bool (<= a$35$$35$a3ia VV$35$$35$F$35$$35$50))
(define-fun b$36$$35$$35$179 () Bool (= lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs ds_d3oZ))
(define-fun b$36$$35$$35$435 () Bool (>= VV$35$$35$F$35$$35$57 z$35$$35$a3i4))
(define-fun b$36$$35$$35$195 () Bool (and (= ds_d3p0 (apply$35$$35$0 (apply$35$$35$0 (as Trees.Trees.MP Int) k$39$$35$$35$a3lR) l$39$$35$$35$a3lT)) (= (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0) k$39$$35$$35$a3lR) (= (apply$35$$35$0 (as Trees.Trees.rest Int) ds_d3p0) l$39$$35$$35$a3lT)))
(define-fun b$36$$35$$35$260 () Bool (and (= lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI (<= ds_d3nY k2$35$$35$a3ik)) (= lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH)))
(define-fun b$36$$35$$35$148 () Bool (and (= (apply$35$$35$8 (as len Int) lq_anf$36$$35$$35$7205759403792806755$35$$35$d3qb) (strLen lq_anf$36$$35$$35$7205759403792806754$35$$35$d3qa)) (>= (apply$35$$35$8 (as len Int) lq_anf$36$$35$$35$7205759403792806755$35$$35$d3qb) 0) (= lq_anf$36$$35$$35$7205759403792806755$35$$35$d3qb lq_anf$36$$35$$35$7205759403792806754$35$$35$d3qa)))
(define-fun b$36$$35$$35$420 () Bool (= VV$35$$35$F$35$$35$51 a$35$$35$a3ia))
(define-fun b$36$$35$$35$180 () Bool (and (not (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs)) (= lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs (as Trees.Trees.Leaf Int)) (= lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs ds_d3oZ)))
(define-fun b$36$$35$$35$212 () Bool (= lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy ds_d3o7))
(define-fun b$36$$35$$35$149 () Bool (= lq_anf$36$$35$$35$7205759403792806756$35$$35$d3qc 24))
(define-fun b$36$$35$$35$421 () Bool (< k$35$$35$a3hX VV$35$$35$F$35$$35$67))
(define-fun b$36$$35$$35$181 () Bool (= lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs ds_d3oZ))
(define-fun b$36$$35$$35$437 () Bool (and (<= VV$35$$35$F$35$$35$58 z$35$$35$a3i4) (<= x$35$$35$a3i7 VV$35$$35$F$35$$35$58)))
(define-fun b$36$$35$$35$197 () Bool (and (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) lq_anf$36$$35$$35$7205759403792806773$35$$35$d3qt) (= (apply$35$$35$0 (as Trees.Trees.left Int) lq_anf$36$$35$$35$7205759403792806773$35$$35$d3qt) l$39$$35$$35$a3lT) (= (apply$35$$35$0 (as Trees.Trees.right Int) lq_anf$36$$35$$35$7205759403792806773$35$$35$d3qt) r$35$$35$a3hY) (= (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806773$35$$35$d3qt) k$35$$35$a3hX)))
(define-fun b$36$$35$$35$213 () Bool (= lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy ds_d3o7))
(define-fun b$36$$35$$35$229 () Bool (and (= lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA ds_d3mz) (= lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as Trees.Trees.Skew Int) a$35$$35$a3ia) b$35$$35$a3ib) c$35$$35$a3ic)) (= (apply$35$$35$0 (as Trees.Trees.sLeft Int) lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA) b$35$$35$a3ib) (= (apply$35$$35$0 (as Trees.Trees.sRight Int) lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA) c$35$$35$a3ic) (= (apply$35$$35$0 (as Trees.Trees.sk Int) lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA) a$35$$35$a3ia)))
(define-fun b$36$$35$$35$150 () Bool (= lq_anf$36$$35$$35$7205759403792806757$35$$35$d3qd lq_anf$36$$35$$35$7205759403792806756$35$$35$d3qc))
(define-fun b$36$$35$$35$182 () Bool (< lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu k$35$$35$a3hX))
(define-fun b$36$$35$$35$214 () Bool (and (= lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy (as Trees.Trees.Emp Int)) (= lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy ds_d3o7)))
(define-fun b$36$$35$$35$246 () Bool (= lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB ds_d3mP))
(define-fun b$36$$35$$35$263 () Bool (and (= lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI (<= ds_d3nY k2$35$$35$a3ik)) (= lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH)))
(define-fun b$36$$35$$35$55 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$151 () Bool (= lq_anf$36$$35$$35$7205759403792806758$35$$35$d3qe 11))
(define-fun b$36$$35$$35$167 () Bool (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) ds_d3oD))
(define-fun b$36$$35$$35$439 () Bool (and (<= VV$35$$35$F$35$$35$59 z$35$$35$a3i4) (<= x$35$$35$a3i7 VV$35$$35$F$35$$35$59)))
(define-fun b$36$$35$$35$215 () Bool (= lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy ds_d3o7))
(define-fun b$36$$35$$35$264 () Bool (and lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI (= lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI (<= ds_d3nY k2$35$$35$a3ik)) (= lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH)))
(define-fun b$36$$35$$35$152 () Bool (= lq_anf$36$$35$$35$7205759403792806759$35$$35$d3qf lq_anf$36$$35$$35$7205759403792806758$35$$35$d3qe))
(define-fun b$36$$35$$35$168 () Bool (and (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) (= lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp ds_d3oD)))
(define-fun b$36$$35$$35$424 () Bool (< k$35$$35$a3hX VV$35$$35$F$35$$35$68))
(define-fun b$36$$35$$35$440 () Bool (= VV$35$$35$F$35$$35$75 ds_d3oZ))
(define-fun b$36$$35$$35$216 () Bool (<= x$35$$35$a3i7 z$35$$35$a3i4))
(define-fun b$36$$35$$35$153 () Bool (= lq_anf$36$$35$$35$7205759403792806760$35$$35$d3qg 24))
(define-fun b$36$$35$$35$169 () Bool (and (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) (= lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp ds_d3oD)))
(define-fun b$36$$35$$35$185 () Bool (and (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) (= lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs ds_d3oZ) (= lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as Trees.Trees.Node Int) lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw)) (= (apply$35$$35$0 (as Trees.Trees.left Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv) (= (apply$35$$35$0 (as Trees.Trees.right Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw) (= (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(define-fun b$36$$35$$35$441 () Bool (= VV$35$$35$F$35$$35$60 z$35$$35$a3i4))
(define-fun b$36$$35$$35$58 () Bool GHC.Types.True)
(define-fun b$36$$35$$35$154 () Bool (= lq_anf$36$$35$$35$7205759403792806761$35$$35$d3qh lq_anf$36$$35$$35$7205759403792806760$35$$35$d3qg))
(define-fun b$36$$35$$35$170 () Bool (and (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) (not (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)) (= lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp (as Trees.Trees.Leaf Int)) (= lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp ds_d3oD)))
(define-fun b$36$$35$$35$442 () Bool (< VV$35$$35$F$35$$35$76 k$35$$35$a3hX))
(define-fun b$36$$35$$35$218 () Bool (and (= lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy ds_d3o7) (= lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy (apply$35$$35$0 (apply$35$$35$0 (as Trees.Trees.$58$$60$ Int) x$35$$35$a3i7) xs$35$$35$a3i8)) (= (apply$35$$35$0 (as Trees.Trees.hd Int) lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy) x$35$$35$a3i7) (= (apply$35$$35$0 (as Trees.Trees.tl Int) lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy) xs$35$$35$a3i8)))
(define-fun b$36$$35$$35$250 () Bool (and (= lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB ds_d3mP) (= lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB (apply$35$$35$0 (apply$35$$35$0 (apply$35$$35$0 (as Trees.Trees.Skew Int) ds_d3nY) ds_d3nZ) ds_d3o0)) (= (apply$35$$35$0 (as Trees.Trees.sLeft Int) lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB) ds_d3nZ) (= (apply$35$$35$0 (as Trees.Trees.sRight Int) lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB) ds_d3o0) (= (apply$35$$35$0 (as Trees.Trees.sk Int) lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB) ds_d3nY)))
(define-fun b$36$$35$$35$155 () Bool (= lq_anf$36$$35$$35$7205759403792806762$35$$35$d3qi 20))
(define-fun b$36$$35$$35$171 () Bool (= lq_anf$36$$35$$35$7205759403792806770$35$$35$d3qq lit$36$Don$39$t$32$say$32$I$32$didn$39$t$32$warn$32$ya$33$))
(define-fun b$36$$35$$35$443 () Bool (>= VV$35$$35$F$35$$35$61 z$35$$35$a3i4))
(define-fun b$36$$35$$35$235 () Bool (= lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB ds_d3mP))
(define-fun b$36$$35$$35$251 () Bool (= lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG ds_d3mQ))
(define-fun b$36$$35$$35$156 () Bool (= lq_anf$36$$35$$35$7205759403792806763$35$$35$d3qj lq_anf$36$$35$$35$7205759403792806762$35$$35$d3qi))
(define-fun b$36$$35$$35$172 () Bool (and (= (apply$35$$35$8 (as len Int) lq_anf$36$$35$$35$7205759403792806771$35$$35$d3qr) (strLen lq_anf$36$$35$$35$7205759403792806770$35$$35$d3qq)) (>= (apply$35$$35$8 (as len Int) lq_anf$36$$35$$35$7205759403792806771$35$$35$d3qr) 0) (= lq_anf$36$$35$$35$7205759403792806771$35$$35$d3qr lq_anf$36$$35$$35$7205759403792806770$35$$35$d3qq)))
(define-fun b$36$$35$$35$444 () Bool (< k$35$$35$a3hX VV$35$$35$F$35$$35$77))
(define-fun b$36$$35$$35$141 () Bool (= lq_anf$36$$35$$35$7205759403792806748$35$$35$d3q4 lit$36$error))
(define-fun b$36$$35$$35$413 () Bool (<= a$35$$35$a3ia VV$35$$35$F$35$$35$48))
(define-fun b$36$$35$$35$173 () Bool (and (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) (= lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp ds_d3oD)))
(define-fun b$36$$35$$35$142 () Bool (and (= (apply$35$$35$8 (as len Int) lq_anf$36$$35$$35$7205759403792806749$35$$35$d3q5) (strLen lq_anf$36$$35$$35$7205759403792806748$35$$35$d3q4)) (>= (apply$35$$35$8 (as len Int) lq_anf$36$$35$$35$7205759403792806749$35$$35$d3q5) 0) (= lq_anf$36$$35$$35$7205759403792806749$35$$35$d3q5 lq_anf$36$$35$$35$7205759403792806748$35$$35$d3q4)))
(define-fun b$36$$35$$35$430 () Bool (= VV$35$$35$F$35$$35$71 k$35$$35$a3hX))
(define-fun b$36$$35$$35$190 () Bool (and (= ds_d3p0 (apply$35$$35$0 (apply$35$$35$0 (as Trees.Trees.MP Int) k$39$$35$$35$a3lR) l$39$$35$$35$a3lT)) (= (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0) k$39$$35$$35$a3lR) (= (apply$35$$35$0 (as Trees.Trees.rest Int) ds_d3p0) l$39$$35$$35$a3lT)))
(define-fun b$36$$35$$35$446 () Bool (<= a$35$$35$a3ia VV$35$$35$F$35$$35$47))
(define-fun b$36$$35$$35$222 () Bool (= lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA ds_d3mz))
(define-fun b$36$$35$$35$254 () Bool (= lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG ds_d3mQ))
(define-fun b$36$$35$$35$143 () Bool (= lq_anf$36$$35$$35$7205759403792806750$35$$35$d3q6 lit$36$LH$45$verificacion$45$asistida$45$0.1.0.0$45$B0H5GdfJzuc2jwReQRD3tY))
(define-fun b$36$$35$$35$159 () Bool (and (= (apply$35$$35$2 (as fst Int) lq_anf$36$$35$$35$7205759403792806765$35$$35$d3ql) lq_anf$36$$35$$35$7205759403792806749$35$$35$d3q5) (= (apply$35$$35$0 (as snd Int) lq_anf$36$$35$$35$7205759403792806765$35$$35$d3ql) lq_anf$36$$35$$35$7205759403792806764$35$$35$d3qk) (= (apply$35$$35$2 (as x_Tuple21 Int) lq_anf$36$$35$$35$7205759403792806765$35$$35$d3ql) lq_anf$36$$35$$35$7205759403792806749$35$$35$d3q5) (= (apply$35$$35$0 (as x_Tuple22 Int) lq_anf$36$$35$$35$7205759403792806765$35$$35$d3ql) lq_anf$36$$35$$35$7205759403792806764$35$$35$d3qk)))
(define-fun b$36$$35$$35$415 () Bool (and (= VV$35$$35$F$35$$35$80 lq_anf$36$$35$$35$7205759403792806771$35$$35$d3qr) (= (apply$35$$35$8 (as len Int) VV$35$$35$F$35$$35$80) (strLen lq_anf$36$$35$$35$7205759403792806770$35$$35$d3qq)) (>= (apply$35$$35$8 (as len Int) VV$35$$35$F$35$$35$80) 0) (= VV$35$$35$F$35$$35$80 lq_anf$36$$35$$35$7205759403792806770$35$$35$d3qq)))
(define-fun b$36$$35$$35$431 () Bool (<= ds_d3nY VV$35$$35$F$35$$35$40))
(define-fun b$36$$35$$35$223 () Bool (= lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA ds_d3mz))
(push 1)
(assert (and true b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$181 b$36$$35$$35$182 b$36$$35$$35$55 b$36$$35$$35$167 b$36$$35$$35$168 b$36$$35$$35$185 b$36$$35$$35$58 b$36$$35$$35$442 b$36$$35$$35$173))
(push 1)
(assert (not (< VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oZ))))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$76 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw) VV$35$$35$F$35$$35$76)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) VV$35$$35$F$35$$35$76)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) r$35$$35$a3hY))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$76 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu VV$35$$35$F$35$$35$76)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD) VV$35$$35$F$35$$35$76)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$76 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oZ))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$76 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oZ) VV$35$$35$F$35$$35$76)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) r$35$$35$a3hY))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$76 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$76 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) r$35$$35$a3hY) VV$35$$35$F$35$$35$76)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$76 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs))))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$76 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= k$35$$35$a3hX VV$35$$35$F$35$$35$76)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) VV$35$$35$F$35$$35$76)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$76 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv) VV$35$$35$F$35$$35$76)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw))))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$76 k$35$$35$a3hX))))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$76 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$76 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu VV$35$$35$F$35$$35$76)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< k$35$$35$a3hX VV$35$$35$F$35$$35$76)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$76 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp))))
(check-sat)
(pop 1)
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (and (< VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)) (not (= VV$35$$35$F$35$$35$74 k$35$$35$a3hX)) (< VV$35$$35$F$35$$35$74 k$35$$35$a3hX) (< VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD)) (<= VV$35$$35$F$35$$35$74 k$35$$35$a3hX) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)) (not (= k$39$$35$$35$a3lR k$35$$35$a3hX)) (< k$39$$35$$35$a3lR k$35$$35$a3hX) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD)) (<= k$39$$35$$35$a3lR k$35$$35$a3hX)) b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$181 b$36$$35$$35$182 (= VV$35$$35$F$35$$35$74 k$39$$35$$35$a3lR) b$36$$35$$35$55 b$36$$35$$35$167 b$36$$35$$35$168 b$36$$35$$35$185 b$36$$35$$35$58 b$36$$35$$35$173 b$36$$35$$35$190))
(push 1)
(assert (not (= VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD) VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$74 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$74 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oZ))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw) VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$74 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$74 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= k$35$$35$a3hX VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) r$35$$35$a3hY))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv))))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$74 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$74 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw))))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$74 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oZ) VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) r$35$$35$a3hY))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv) VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$74 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< k$35$$35$a3hX VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$74 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) r$35$$35$a3hY) VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0) VV$35$$35$F$35$$35$74)))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$74 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$74 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oZ))))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$74 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$74 k$35$$35$a3hX))))
(check-sat)
(pop 1)
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (and (< VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)) (not (= VV$35$$35$F$35$$35$73 k$35$$35$a3hX)) (< VV$35$$35$F$35$$35$73 k$35$$35$a3hX) (< VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD)) (<= VV$35$$35$F$35$$35$73 k$35$$35$a3hX) (not (= k$39$$35$$35$a3lR k$35$$35$a3hX)) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD)) (< k$39$$35$$35$a3lR k$35$$35$a3hX) (= k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0)) (<= k$39$$35$$35$a3lR k$35$$35$a3hX)) b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$195 (< k$39$$35$$35$a3lR VV$35$$35$F$35$$35$73) b$36$$35$$35$181 b$36$$35$$35$182 b$36$$35$$35$55 b$36$$35$$35$167 b$36$$35$$35$168 b$36$$35$$35$185 b$36$$35$$35$58 b$36$$35$$35$173))
(push 1)
(assert (not (< VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) r$35$$35$a3hY))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$73 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$73 k$39$$35$$35$a3lR)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oZ))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv) VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$73 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= k$35$$35$a3hX VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$73 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$73 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$73 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw) VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$73 k$39$$35$$35$a3lR)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= k$39$$35$$35$a3lR VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0) VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< k$39$$35$$35$a3lR VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) r$35$$35$a3hY))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) r$35$$35$a3hY) VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$73 k$39$$35$$35$a3lR)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oZ))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$73 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< k$35$$35$a3hX VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$73 k$39$$35$$35$a3lR)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp))))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$73 k$39$$35$$35$a3lR)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oZ) VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$73 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD) VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu VV$35$$35$F$35$$35$73)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$73 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD))))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$73 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$73 k$35$$35$a3hX))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$73 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$73 k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$73 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD))))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$73 k$39$$35$$35$a3lR))))
(check-sat)
(pop 1)
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Unsat
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (and (not (= k$39$$35$$35$a3lR k$35$$35$a3hX)) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD)) (< k$39$$35$$35$a3lR k$35$$35$a3hX) (= k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0)) (<= k$39$$35$$35$a3lR k$35$$35$a3hX)) b$36$$35$$35$177 b$36$$35$$35$433 b$36$$35$$35$178 b$36$$35$$35$195 b$36$$35$$35$181 b$36$$35$$35$182 b$36$$35$$35$55 b$36$$35$$35$167 b$36$$35$$35$168 b$36$$35$$35$185 b$36$$35$$35$58 b$36$$35$$35$173))
(push 1)
(assert (not (<= r$35$$35$a3hY VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.root Int) VV$35$$35$F$35$$35$72) k$35$$35$a3hX)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.right Int) r$35$$35$a3hY))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.left Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp))))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$72 ds_d3oD))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.right Int) VV$35$$35$F$35$$35$72) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.right Int) ds_d3oZ))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.left Int) VV$35$$35$F$35$$35$72) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs)))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) VV$35$$35$F$35$$35$72))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 ds_d3oD)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.left Int) VV$35$$35$F$35$$35$72) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.left Int) ds_d3oZ))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.right Int) VV$35$$35$F$35$$35$72) r$35$$35$a3hY)))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.root Int) VV$35$$35$F$35$$35$72) k$39$$35$$35$a3lR)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.left Int) VV$35$$35$F$35$$35$72) r$35$$35$a3hY)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs))))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$72 r$35$$35$a3hY)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= ds_d3oZ VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$72 ds_d3oZ)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$72 r$35$$35$a3hY)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.root Int) VV$35$$35$F$35$$35$72) lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv)))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$72 ds_d3oZ)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.left Int) VV$35$$35$F$35$$35$72) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.right Int) VV$35$$35$F$35$$35$72) ds_d3oZ)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.left Int) r$35$$35$a3hY))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.right Int) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.right Int) VV$35$$35$F$35$$35$72) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.left Int) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.left Int) ds_d3oD))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 ds_d3oZ)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.right Int) VV$35$$35$F$35$$35$72) ds_d3oD)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 r$35$$35$a3hY)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv))))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< ds_d3oD VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.rest Int) ds_d3p0))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.right Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$72 r$35$$35$a3hY))))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$72 ds_d3oD)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.right Int) VV$35$$35$F$35$$35$72) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.right Int) VV$35$$35$F$35$$35$72) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$72 ds_d3oD)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< ds_d3oZ VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw)))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.left Int) VV$35$$35$F$35$$35$72) lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.left Int) VV$35$$35$F$35$$35$72) ds_d3oD)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$72 ds_d3oZ)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.right Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs))))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= ds_d3oD VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$72 ds_d3oD)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$72 r$35$$35$a3hY)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.right Int) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw))))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$72 ds_d3oD)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$72 r$35$$35$a3hY)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$0 (as Trees.Trees.left Int) VV$35$$35$F$35$$35$72) ds_d3oZ)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.left Int) lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs))))
(check-sat)
(pop 1)
(push 1)
(assert (not (> VV$35$$35$F$35$$35$72 ds_d3oZ)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.left Int) lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw))))
(check-sat)
(pop 1)
(push 1)
(assert (not (not (= VV$35$$35$F$35$$35$72 ds_d3oZ))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 (apply$35$$35$0 (as Trees.Trees.right Int) ds_d3oD))))
(check-sat)
(pop 1)
(push 1)
(assert (not (= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs)))
(check-sat)
(pop 1)
(push 1)
(assert (not (< r$35$$35$a3hY VV$35$$35$F$35$$35$72)))
(check-sat)
(pop 1)
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$72 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw)))
(check-sat)
(pop 1)
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Unsat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
; SMT Says: Sat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$417 b$36$$35$$35$55 b$36$$35$$35$58))
(push 1)
(assert (not false))
(check-sat)
(pop 1)
(push 1)
(assert (not (= 0 1)))
(check-sat)
(pop 1)
(push 1)
(assert (not (= (apply$35$$35$8 (as len Int) VV$35$$35$F$35$$35$81) 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (> (apply$35$$35$8 (as len Int) VV$35$$35$F$35$$35$81) 0)))
(check-sat)
(pop 1)
(push 1)
(assert (not (>= (apply$35$$35$8 (as len Int) VV$35$$35$F$35$$35$81) 0)))
(check-sat)
(pop 1)
; SMT Says: Unsat
; SMT Says: Unsat
; SMT Says: Unsat
; SMT Says: Unsat
; SMT Says: Unsat
(pop 1)
(push 1)
(push 1)
(assert (and (and (= l$39$$35$$35$a3lT (apply$35$$35$0 (as Trees.Trees.rest Int) ds_d3p0)) (or (exists ((lq_karg$36$l$39$$35$$35$a3lT$35$$35$k_$35$$35$1187 Int) (lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1187 Int) (lq_karg$36$VV$35$$35$1186$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1187 Int) (lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1187 Int) (lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1187 Int) (lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1187 Int) (lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1187 Int) (lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1187 Int)) (and (= lq_karg$36$VV$35$$35$1186$35$$35$k_$35$$35$1187 VV$35$$35$F$35$$35$64) (= lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1187 ds_d3oD) (= lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1187 ds_d3oZ) (= lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1187 ds_d3p0) (= lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1187 k$35$$35$a3hX) (= lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1187 k$39$$35$$35$a3lR) (= lq_karg$36$l$39$$35$$35$a3lT$35$$35$k_$35$$35$1187 l$39$$35$$35$a3lT) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw) (= lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1187 r$35$$35$a3hY) (exists ((VV$35$$35$F$35$$35$71 Int)) (and (= VV$35$$35$F$35$$35$71 k$35$$35$a3hX) (= lq_karg$36$VV$35$$35$1186$35$$35$k_$35$$35$1187 VV$35$$35$F$35$$35$71) (= lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1187 ds_d3oD) (= lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1187 ds_d3oZ) (= lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1187 ds_d3p0) (= lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1187 k$35$$35$a3hX) (= lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1187 k$39$$35$$35$a3lR) (= lq_karg$36$l$39$$35$$35$a3lT$35$$35$k_$35$$35$1187 l$39$$35$$35$a3lT) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw) (= lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1187 r$35$$35$a3hY))))) (exists ((lq_karg$36$l$39$$35$$35$a3lT$35$$35$k_$35$$35$1187 Int) (lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1187 Int) (lq_karg$36$VV$35$$35$1186$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1187 Int) (lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1187 Int) (lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1187 Int) (lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1187 Int) (lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1187 Int) (lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1187 Int)) (and (= lq_karg$36$VV$35$$35$1186$35$$35$k_$35$$35$1187 VV$35$$35$F$35$$35$64) (= lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1187 ds_d3oD) (= lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1187 ds_d3oZ) (= lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1187 ds_d3p0) (= lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1187 k$35$$35$a3hX) (= lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1187 k$39$$35$$35$a3lR) (= lq_karg$36$l$39$$35$$35$a3lT$35$$35$k_$35$$35$1187 l$39$$35$$35$a3lT) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw) (= lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1187 r$35$$35$a3hY) (exists ((VV$35$$35$F$35$$35$70 Int)) (and (not (= VV$35$$35$F$35$$35$70 k$39$$35$$35$a3lR)) (< VV$35$$35$F$35$$35$70 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD)) (< VV$35$$35$F$35$$35$70 k$35$$35$a3hX) (not (= VV$35$$35$F$35$$35$70 k$35$$35$a3hX)) (< VV$35$$35$F$35$$35$70 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)) (> VV$35$$35$F$35$$35$70 k$39$$35$$35$a3lR) (>= VV$35$$35$F$35$$35$70 k$39$$35$$35$a3lR) (< k$39$$35$$35$a3lR VV$35$$35$F$35$$35$70) (< (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0) VV$35$$35$F$35$$35$70) (<= k$39$$35$$35$a3lR VV$35$$35$F$35$$35$70) (<= VV$35$$35$F$35$$35$70 k$35$$35$a3hX) (= lq_karg$36$VV$35$$35$1186$35$$35$k_$35$$35$1187 VV$35$$35$F$35$$35$70) (= lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1187 ds_d3oD) (= lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1187 ds_d3oZ) (= lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1187 ds_d3p0) (= lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1187 k$35$$35$a3hX) (= lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1187 k$39$$35$$35$a3lR) (= lq_karg$36$l$39$$35$$35$a3lT$35$$35$k_$35$$35$1187 l$39$$35$$35$a3lT) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw) (= lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1187 r$35$$35$a3hY))))) (exists ((lq_karg$36$l$39$$35$$35$a3lT$35$$35$k_$35$$35$1187 Int) (lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1187 Int) (lq_karg$36$VV$35$$35$1186$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1187 Int) (lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1187 Int) (lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1187 Int) (lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1187 Int) (lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1187 Int) (lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1187 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1187 Int)) (and (= lq_karg$36$VV$35$$35$1186$35$$35$k_$35$$35$1187 VV$35$$35$F$35$$35$64) (= lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1187 ds_d3oD) (= lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1187 ds_d3oZ) (= lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1187 ds_d3p0) (= lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1187 k$35$$35$a3hX) (= lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1187 k$39$$35$$35$a3lR) (= lq_karg$36$l$39$$35$$35$a3lT$35$$35$k_$35$$35$1187 l$39$$35$$35$a3lT) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw) (= lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1187 r$35$$35$a3hY) (exists ((VV$35$$35$F$35$$35$68 Int)) (and (< k$35$$35$a3hX VV$35$$35$F$35$$35$68) (= lq_karg$36$VV$35$$35$1186$35$$35$k_$35$$35$1187 VV$35$$35$F$35$$35$68) (= lq_karg$36$ds_d3oD$35$$35$k_$35$$35$1187 ds_d3oD) (= lq_karg$36$ds_d3oZ$35$$35$k_$35$$35$1187 ds_d3oZ) (= lq_karg$36$ds_d3p0$35$$35$k_$35$$35$1187 ds_d3p0) (= lq_karg$36$k$35$$35$a3hX$35$$35$k_$35$$35$1187 k$35$$35$a3hX) (= lq_karg$36$k$39$$35$$35$a3lR$35$$35$k_$35$$35$1187 k$39$$35$$35$a3lR) (= lq_karg$36$l$39$$35$$35$a3lT$35$$35$k_$35$$35$1187 l$39$$35$$35$a3lT) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806772$35$$35$d3qs) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806774$35$$35$d3qu) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806775$35$$35$d3qv) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw$35$$35$k_$35$$35$1187 lq_anf$36$$35$$35$7205759403792806776$35$$35$d3qw) (= lq_karg$36$r$35$$35$a3hY$35$$35$k_$35$$35$1187 r$35$$35$a3hY)))))) (not (= k$39$$35$$35$a3lR k$35$$35$a3hX)) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD)) (< k$39$$35$$35$a3lR k$35$$35$a3hX) (= k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0)) (<= k$39$$35$$35$a3lR k$35$$35$a3hX)) b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$181 b$36$$35$$35$197 b$36$$35$$35$182 b$36$$35$$35$55 b$36$$35$$35$167 b$36$$35$$35$168 b$36$$35$$35$185 b$36$$35$$35$58 b$36$$35$$35$173))
(push 1)
(assert (not (< k$39$$35$$35$a3lR VV$35$$35$F$35$$35$64)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$55 b$36$$35$$35$167 b$36$$35$$35$168 b$36$$35$$35$169 b$36$$35$$35$58 b$36$$35$$35$170 b$36$$35$$35$171 b$36$$35$$35$172 b$36$$35$$35$415))
(push 1)
(assert (not false))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$416 b$36$$35$$35$225 b$36$$35$$35$229 b$36$$35$$35$55 b$36$$35$$35$58 b$36$$35$$35$222))
(push 1)
(assert (not (<= a$35$$35$a3ia VV$35$$35$F$35$$35$49)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$258 b$36$$35$$35$418 b$36$$35$$35$259 b$36$$35$$35$260 b$36$$35$$35$246 b$36$$35$$35$263 b$36$$35$$35$55 b$36$$35$$35$264 b$36$$35$$35$58 b$36$$35$$35$250 b$36$$35$$35$235 b$36$$35$$35$251 b$36$$35$$35$254))
(push 1)
(assert (not (<= ds_d3nY VV$35$$35$F$35$$35$34)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (and (= l$39$$35$$35$a3lT (apply$35$$35$0 (as Trees.Trees.rest Int) ds_d3p0)) (not (= k$39$$35$$35$a3lR k$35$$35$a3hX)) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD)) (< k$39$$35$$35$a3lR k$35$$35$a3hX) (= k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0)) (<= k$39$$35$$35$a3lR k$35$$35$a3hX)) b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$421 b$36$$35$$35$181 b$36$$35$$35$182 b$36$$35$$35$55 b$36$$35$$35$167 b$36$$35$$35$168 b$36$$35$$35$185 b$36$$35$$35$58 b$36$$35$$35$173))
(push 1)
(assert (not (< k$35$$35$a3hX VV$35$$35$F$35$$35$67)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (or (exists ((lq_karg$36$ds_d3o0$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3nY$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3nZ$35$$35$k_$35$$35$1650 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3mQ$35$$35$k_$35$$35$1650 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3mP$35$$35$k_$35$$35$1650 Int) (lq_karg$36$VV$35$$35$1649$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3o2$35$$35$k_$35$$35$1650 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH$35$$35$k_$35$$35$1650 Bool) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI$35$$35$k_$35$$35$1650 Bool) (lq_karg$36$k2$35$$35$a3ik$35$$35$k_$35$$35$1650 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3o1$35$$35$k_$35$$35$1650 Int)) (and (= lq_karg$36$VV$35$$35$1649$35$$35$k_$35$$35$1650 VV$35$$35$F$35$$35$36) (= lq_karg$36$ds_d3mP$35$$35$k_$35$$35$1650 ds_d3mP) (= lq_karg$36$ds_d3mQ$35$$35$k_$35$$35$1650 ds_d3mQ) (= lq_karg$36$ds_d3nY$35$$35$k_$35$$35$1650 ds_d3nY) (= lq_karg$36$ds_d3nZ$35$$35$k_$35$$35$1650 ds_d3nZ) (= lq_karg$36$ds_d3o0$35$$35$k_$35$$35$1650 ds_d3o0) (= lq_karg$36$ds_d3o1$35$$35$k_$35$$35$1650 ds_d3o1) (= lq_karg$36$ds_d3o2$35$$35$k_$35$$35$1650 ds_d3o2) (= lq_karg$36$k2$35$$35$a3ik$35$$35$k_$35$$35$1650 k2$35$$35$a3ik) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ) (exists ((VV$35$$35$F$35$$35$40 Int)) (and (<= ds_d3nY VV$35$$35$F$35$$35$40) (= lq_karg$36$VV$35$$35$1649$35$$35$k_$35$$35$1650 VV$35$$35$F$35$$35$40) (= lq_karg$36$ds_d3mP$35$$35$k_$35$$35$1650 ds_d3mP) (= lq_karg$36$ds_d3mQ$35$$35$k_$35$$35$1650 ds_d3mQ) (= lq_karg$36$ds_d3nY$35$$35$k_$35$$35$1650 ds_d3nY) (= lq_karg$36$ds_d3nZ$35$$35$k_$35$$35$1650 ds_d3nZ) (= lq_karg$36$ds_d3o0$35$$35$k_$35$$35$1650 ds_d3o0) (= lq_karg$36$ds_d3o1$35$$35$k_$35$$35$1650 ds_d3o1) (= lq_karg$36$ds_d3o2$35$$35$k_$35$$35$1650 ds_d3o2) (= lq_karg$36$k2$35$$35$a3ik$35$$35$k_$35$$35$1650 k2$35$$35$a3ik) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ))))) (exists ((lq_karg$36$ds_d3o0$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3nY$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3nZ$35$$35$k_$35$$35$1650 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3mQ$35$$35$k_$35$$35$1650 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3mP$35$$35$k_$35$$35$1650 Int) (lq_karg$36$VV$35$$35$1649$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3o2$35$$35$k_$35$$35$1650 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH$35$$35$k_$35$$35$1650 Bool) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI$35$$35$k_$35$$35$1650 Bool) (lq_karg$36$k2$35$$35$a3ik$35$$35$k_$35$$35$1650 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG$35$$35$k_$35$$35$1650 Int) (lq_karg$36$ds_d3o1$35$$35$k_$35$$35$1650 Int)) (and (= lq_karg$36$VV$35$$35$1649$35$$35$k_$35$$35$1650 VV$35$$35$F$35$$35$36) (= lq_karg$36$ds_d3mP$35$$35$k_$35$$35$1650 ds_d3mP) (= lq_karg$36$ds_d3mQ$35$$35$k_$35$$35$1650 ds_d3mQ) (= lq_karg$36$ds_d3nY$35$$35$k_$35$$35$1650 ds_d3nY) (= lq_karg$36$ds_d3nZ$35$$35$k_$35$$35$1650 ds_d3nZ) (= lq_karg$36$ds_d3o0$35$$35$k_$35$$35$1650 ds_d3o0) (= lq_karg$36$ds_d3o1$35$$35$k_$35$$35$1650 ds_d3o1) (= lq_karg$36$ds_d3o2$35$$35$k_$35$$35$1650 ds_d3o2) (= lq_karg$36$k2$35$$35$a3ik$35$$35$k_$35$$35$1650 k2$35$$35$a3ik) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ) (exists ((VV$35$$35$F$35$$35$39 Int)) (and (exists ((lq_karg$36$VV$35$$35$1627$35$$35$k_$35$$35$1628 Int) (lq_karg$36$ds_d3o0$35$$35$k_$35$$35$1628 Int) (lq_karg$36$ds_d3nY$35$$35$k_$35$$35$1628 Int) (lq_karg$36$ds_d3o1$35$$35$k_$35$$35$1628 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI$35$$35$k_$35$$35$1628 Bool) (lq_karg$36$k2$35$$35$a3ik$35$$35$k_$35$$35$1628 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG$35$$35$k_$35$$35$1628 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH$35$$35$k_$35$$35$1628 Bool) (lq_karg$36$ds_d3o2$35$$35$k_$35$$35$1628 Int) (lq_karg$36$ds_d3mP$35$$35$k_$35$$35$1628 Int) (lq_karg$36$ds_d3nZ$35$$35$k_$35$$35$1628 Int) (lq_karg$36$ds_d3mQ$35$$35$k_$35$$35$1628 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB$35$$35$k_$35$$35$1628 Int)) (and (= lq_karg$36$VV$35$$35$1627$35$$35$k_$35$$35$1628 VV$35$$35$F$35$$35$39) (= lq_karg$36$ds_d3mP$35$$35$k_$35$$35$1628 ds_d3mP) (= lq_karg$36$ds_d3mQ$35$$35$k_$35$$35$1628 ds_d3mQ) (= lq_karg$36$ds_d3nY$35$$35$k_$35$$35$1628 ds_d3nY) (= lq_karg$36$ds_d3nZ$35$$35$k_$35$$35$1628 ds_d3nZ) (= lq_karg$36$ds_d3o0$35$$35$k_$35$$35$1628 ds_d3o0) (= lq_karg$36$ds_d3o1$35$$35$k_$35$$35$1628 ds_d3o1) (= lq_karg$36$ds_d3o2$35$$35$k_$35$$35$1628 ds_d3o2) (= lq_karg$36$k2$35$$35$a3ik$35$$35$k_$35$$35$1628 k2$35$$35$a3ik) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB$35$$35$k_$35$$35$1628 lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG$35$$35$k_$35$$35$1628 lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH$35$$35$k_$35$$35$1628 lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI$35$$35$k_$35$$35$1628 lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI) (exists ((VV$35$$35$F$35$$35$41 Int)) (and (= lq_karg$36$VV$35$$35$1627$35$$35$k_$35$$35$1628 VV$35$$35$F$35$$35$41) (= lq_karg$36$ds_d3mP$35$$35$k_$35$$35$1628 ds_d3mP) (= lq_karg$36$ds_d3mQ$35$$35$k_$35$$35$1628 ds_d3mQ) (= lq_karg$36$ds_d3nY$35$$35$k_$35$$35$1628 ds_d3nY) (= lq_karg$36$ds_d3nZ$35$$35$k_$35$$35$1628 ds_d3nZ) (= lq_karg$36$ds_d3o0$35$$35$k_$35$$35$1628 ds_d3o0) (= lq_karg$36$ds_d3o1$35$$35$k_$35$$35$1628 ds_d3o1) (= lq_karg$36$ds_d3o2$35$$35$k_$35$$35$1628 ds_d3o2) (= lq_karg$36$k2$35$$35$a3ik$35$$35$k_$35$$35$1628 k2$35$$35$a3ik) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB$35$$35$k_$35$$35$1628 lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG$35$$35$k_$35$$35$1628 lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH$35$$35$k_$35$$35$1628 lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI$35$$35$k_$35$$35$1628 lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI))))) (<= (apply$35$$35$0 (as Trees.Trees.sk Int) ds_d3mQ) VV$35$$35$F$35$$35$39) (= lq_karg$36$VV$35$$35$1649$35$$35$k_$35$$35$1650 VV$35$$35$F$35$$35$39) (= lq_karg$36$ds_d3mP$35$$35$k_$35$$35$1650 ds_d3mP) (= lq_karg$36$ds_d3mQ$35$$35$k_$35$$35$1650 ds_d3mQ) (= lq_karg$36$ds_d3nY$35$$35$k_$35$$35$1650 ds_d3nY) (= lq_karg$36$ds_d3nZ$35$$35$k_$35$$35$1650 ds_d3nZ) (= lq_karg$36$ds_d3o0$35$$35$k_$35$$35$1650 ds_d3o0) (= lq_karg$36$ds_d3o1$35$$35$k_$35$$35$1650 ds_d3o1) (= lq_karg$36$ds_d3o2$35$$35$k_$35$$35$1650 ds_d3o2) (= lq_karg$36$k2$35$$35$a3ik$35$$35$k_$35$$35$1650 k2$35$$35$a3ik) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806781$35$$35$d3qB) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806786$35$$35$d3qG) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806787$35$$35$d3qH) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806788$35$$35$d3qI) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ$35$$35$k_$35$$35$1650 lq_anf$36$$35$$35$7205759403792806789$35$$35$d3qJ)))))) b$36$$35$$35$258 b$36$$35$$35$259 b$36$$35$$35$260 b$36$$35$$35$246 b$36$$35$$35$263 b$36$$35$$35$55 b$36$$35$$35$264 b$36$$35$$35$58 b$36$$35$$35$250 b$36$$35$$35$235 b$36$$35$$35$251 b$36$$35$$35$254))
(push 1)
(assert (not (<= ds_d3nY VV$35$$35$F$35$$35$36)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and false b$36$$35$$35$224 b$36$$35$$35$55 b$36$$35$$35$58 b$36$$35$$35$222 b$36$$35$$35$223))
(push 1)
(assert (not (<= (apply$35$$35$0 (as Trees.Trees.sk Int) ds_d3mz) VV$35$$35$F$35$$35$52)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (or (exists ((lq_karg$36$xs$35$$35$a3i8$35$$35$k_$35$$35$1325 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy$35$$35$k_$35$$35$1325 Int) (lq_karg$36$ys$35$$35$a3i5$35$$35$k_$35$$35$1325 Int) (lq_karg$36$x$35$$35$a3i7$35$$35$k_$35$$35$1325 Int) (lq_karg$36$VV$35$$35$1324$35$$35$k_$35$$35$1325 Int) (lq_karg$36$ds_d3o7$35$$35$k_$35$$35$1325 Int) (lq_karg$36$z$35$$35$a3i4$35$$35$k_$35$$35$1325 Int)) (and (= lq_karg$36$VV$35$$35$1324$35$$35$k_$35$$35$1325 VV$35$$35$F$35$$35$53) (= lq_karg$36$ds_d3o7$35$$35$k_$35$$35$1325 ds_d3o7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy$35$$35$k_$35$$35$1325 lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy) (= lq_karg$36$x$35$$35$a3i7$35$$35$k_$35$$35$1325 x$35$$35$a3i7) (= lq_karg$36$xs$35$$35$a3i8$35$$35$k_$35$$35$1325 xs$35$$35$a3i8) (= lq_karg$36$ys$35$$35$a3i5$35$$35$k_$35$$35$1325 ys$35$$35$a3i5) (= lq_karg$36$z$35$$35$a3i4$35$$35$k_$35$$35$1325 z$35$$35$a3i4) (exists ((VV$35$$35$F$35$$35$60 Int)) (and (= VV$35$$35$F$35$$35$60 z$35$$35$a3i4) (= lq_karg$36$VV$35$$35$1324$35$$35$k_$35$$35$1325 VV$35$$35$F$35$$35$60) (= lq_karg$36$ds_d3o7$35$$35$k_$35$$35$1325 ds_d3o7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy$35$$35$k_$35$$35$1325 lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy) (= lq_karg$36$x$35$$35$a3i7$35$$35$k_$35$$35$1325 x$35$$35$a3i7) (= lq_karg$36$xs$35$$35$a3i8$35$$35$k_$35$$35$1325 xs$35$$35$a3i8) (= lq_karg$36$ys$35$$35$a3i5$35$$35$k_$35$$35$1325 ys$35$$35$a3i5) (= lq_karg$36$z$35$$35$a3i4$35$$35$k_$35$$35$1325 z$35$$35$a3i4))))) (exists ((lq_karg$36$xs$35$$35$a3i8$35$$35$k_$35$$35$1325 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy$35$$35$k_$35$$35$1325 Int) (lq_karg$36$ys$35$$35$a3i5$35$$35$k_$35$$35$1325 Int) (lq_karg$36$x$35$$35$a3i7$35$$35$k_$35$$35$1325 Int) (lq_karg$36$VV$35$$35$1324$35$$35$k_$35$$35$1325 Int) (lq_karg$36$ds_d3o7$35$$35$k_$35$$35$1325 Int) (lq_karg$36$z$35$$35$a3i4$35$$35$k_$35$$35$1325 Int)) (and (= lq_karg$36$VV$35$$35$1324$35$$35$k_$35$$35$1325 VV$35$$35$F$35$$35$53) (= lq_karg$36$ds_d3o7$35$$35$k_$35$$35$1325 ds_d3o7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy$35$$35$k_$35$$35$1325 lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy) (= lq_karg$36$x$35$$35$a3i7$35$$35$k_$35$$35$1325 x$35$$35$a3i7) (= lq_karg$36$xs$35$$35$a3i8$35$$35$k_$35$$35$1325 xs$35$$35$a3i8) (= lq_karg$36$ys$35$$35$a3i5$35$$35$k_$35$$35$1325 ys$35$$35$a3i5) (= lq_karg$36$z$35$$35$a3i4$35$$35$k_$35$$35$1325 z$35$$35$a3i4) (exists ((VV$35$$35$F$35$$35$59 Int)) (and (<= VV$35$$35$F$35$$35$59 z$35$$35$a3i4) (<= x$35$$35$a3i7 VV$35$$35$F$35$$35$59) (= lq_karg$36$VV$35$$35$1324$35$$35$k_$35$$35$1325 VV$35$$35$F$35$$35$59) (= lq_karg$36$ds_d3o7$35$$35$k_$35$$35$1325 ds_d3o7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy$35$$35$k_$35$$35$1325 lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy) (= lq_karg$36$x$35$$35$a3i7$35$$35$k_$35$$35$1325 x$35$$35$a3i7) (= lq_karg$36$xs$35$$35$a3i8$35$$35$k_$35$$35$1325 xs$35$$35$a3i8) (= lq_karg$36$ys$35$$35$a3i5$35$$35$k_$35$$35$1325 ys$35$$35$a3i5) (= lq_karg$36$z$35$$35$a3i4$35$$35$k_$35$$35$1325 z$35$$35$a3i4))))) (exists ((lq_karg$36$xs$35$$35$a3i8$35$$35$k_$35$$35$1325 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy$35$$35$k_$35$$35$1325 Int) (lq_karg$36$ys$35$$35$a3i5$35$$35$k_$35$$35$1325 Int) (lq_karg$36$x$35$$35$a3i7$35$$35$k_$35$$35$1325 Int) (lq_karg$36$VV$35$$35$1324$35$$35$k_$35$$35$1325 Int) (lq_karg$36$ds_d3o7$35$$35$k_$35$$35$1325 Int) (lq_karg$36$z$35$$35$a3i4$35$$35$k_$35$$35$1325 Int)) (and (= lq_karg$36$VV$35$$35$1324$35$$35$k_$35$$35$1325 VV$35$$35$F$35$$35$53) (= lq_karg$36$ds_d3o7$35$$35$k_$35$$35$1325 ds_d3o7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy$35$$35$k_$35$$35$1325 lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy) (= lq_karg$36$x$35$$35$a3i7$35$$35$k_$35$$35$1325 x$35$$35$a3i7) (= lq_karg$36$xs$35$$35$a3i8$35$$35$k_$35$$35$1325 xs$35$$35$a3i8) (= lq_karg$36$ys$35$$35$a3i5$35$$35$k_$35$$35$1325 ys$35$$35$a3i5) (= lq_karg$36$z$35$$35$a3i4$35$$35$k_$35$$35$1325 z$35$$35$a3i4) (exists ((VV$35$$35$F$35$$35$57 Int)) (and (>= VV$35$$35$F$35$$35$57 z$35$$35$a3i4) (= lq_karg$36$VV$35$$35$1324$35$$35$k_$35$$35$1325 VV$35$$35$F$35$$35$57) (= lq_karg$36$ds_d3o7$35$$35$k_$35$$35$1325 ds_d3o7) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy$35$$35$k_$35$$35$1325 lq_anf$36$$35$$35$7205759403792806778$35$$35$d3qy) (= lq_karg$36$x$35$$35$a3i7$35$$35$k_$35$$35$1325 x$35$$35$a3i7) (= lq_karg$36$xs$35$$35$a3i8$35$$35$k_$35$$35$1325 xs$35$$35$a3i8) (= lq_karg$36$ys$35$$35$a3i5$35$$35$k_$35$$35$1325 ys$35$$35$a3i5) (= lq_karg$36$z$35$$35$a3i4$35$$35$k_$35$$35$1325 z$35$$35$a3i4)))))) b$36$$35$$35$212 b$36$$35$$35$55 b$36$$35$$35$215 b$36$$35$$35$216 b$36$$35$$35$58 b$36$$35$$35$218))
(push 1)
(assert (not (<= x$35$$35$a3i7 VV$35$$35$F$35$$35$53)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (and (= l$39$$35$$35$a3lT (apply$35$$35$0 (as Trees.Trees.rest Int) ds_d3p0)) (not (= VV$35$$35$F$35$$35$69 k$39$$35$$35$a3lR)) (< VV$35$$35$F$35$$35$69 (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD)) (< VV$35$$35$F$35$$35$69 k$35$$35$a3hX) (not (= VV$35$$35$F$35$$35$69 k$35$$35$a3hX)) (< VV$35$$35$F$35$$35$69 (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)) (> VV$35$$35$F$35$$35$69 k$39$$35$$35$a3lR) (>= VV$35$$35$F$35$$35$69 k$39$$35$$35$a3lR) (< k$39$$35$$35$a3lR VV$35$$35$F$35$$35$69) (< (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0) VV$35$$35$F$35$$35$69) (<= k$39$$35$$35$a3lR VV$35$$35$F$35$$35$69) (<= VV$35$$35$F$35$$35$69 k$35$$35$a3hX) (not (= k$39$$35$$35$a3lR k$35$$35$a3hX)) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) lq_anf$36$$35$$35$7205759403792806769$35$$35$d3qp)) (< k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.root Int) ds_d3oD)) (< k$39$$35$$35$a3lR k$35$$35$a3hX) (= k$39$$35$$35$a3lR (apply$35$$35$0 (as Trees.Trees.mElt Int) ds_d3p0)) (<= k$39$$35$$35$a3lR k$35$$35$a3hX)) b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$181 b$36$$35$$35$182 b$36$$35$$35$55 b$36$$35$$35$167 b$36$$35$$35$168 b$36$$35$$35$185 b$36$$35$$35$58 b$36$$35$$35$173))
(push 1)
(assert (not (< VV$35$$35$F$35$$35$69 k$35$$35$a3hX)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and false b$36$$35$$35$144 b$36$$35$$35$145 b$36$$35$$35$161 b$36$$35$$35$146 b$36$$35$$35$147 b$36$$35$$35$148 (>= (apply$35$$35$8 (as len Int) msg$35$$35$a3hV) 0) b$36$$35$$35$149 b$36$$35$$35$150 b$36$$35$$35$55 b$36$$35$$35$151 b$36$$35$$35$152 b$36$$35$$35$153 b$36$$35$$35$58 b$36$$35$$35$154 b$36$$35$$35$155 (and (= VV$35$$35$F$35$$35$85 msg$35$$35$a3hV) (>= (apply$35$$35$8 (as len Int) VV$35$$35$F$35$$35$85) 0)) b$36$$35$$35$156 b$36$$35$$35$141 b$36$$35$$35$142 b$36$$35$$35$143 b$36$$35$$35$159))
(push 1)
(assert (not false))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$432 b$36$$35$$35$212 b$36$$35$$35$55 b$36$$35$$35$215 b$36$$35$$35$216 b$36$$35$$35$58 b$36$$35$$35$218))
(push 1)
(assert (not (>= VV$35$$35$F$35$$35$56 z$35$$35$a3i4)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$212 b$36$$35$$35$437 b$36$$35$$35$55 b$36$$35$$35$215 b$36$$35$$35$216 b$36$$35$$35$58 b$36$$35$$35$218))
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$58 z$35$$35$a3i4)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$181 b$36$$35$$35$182 b$36$$35$$35$55 b$36$$35$$35$167 b$36$$35$$35$168 b$36$$35$$35$440 b$36$$35$$35$185 b$36$$35$$35$58 b$36$$35$$35$173))
(push 1)
(assert (not (apply$35$$35$1 (as Trees.Trees.nonEmpty Int) VV$35$$35$F$35$$35$75)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$212 b$36$$35$$35$213 b$36$$35$$35$214 b$36$$35$$35$55 b$36$$35$$35$58 b$36$$35$$35$443))
(push 1)
(assert (not (<= z$35$$35$a3i4 VV$35$$35$F$35$$35$61)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$177 b$36$$35$$35$178 b$36$$35$$35$179 b$36$$35$$35$180 b$36$$35$$35$55 b$36$$35$$35$167 b$36$$35$$35$168 b$36$$35$$35$58 b$36$$35$$35$444 b$36$$35$$35$173))
(push 1)
(assert (not (< k$35$$35$a3hX VV$35$$35$F$35$$35$77)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (or (exists ((lq_karg$36$ds_d3mz$35$$35$k_$35$$35$1415 Int) (lq_karg$36$b$35$$35$a3ib$35$$35$k_$35$$35$1415 Int) (lq_karg$36$c$35$$35$a3ic$35$$35$k_$35$$35$1415 Int) (lq_karg$36$a$35$$35$a3ia$35$$35$k_$35$$35$1415 Int) (lq_karg$36$VV$35$$35$1414$35$$35$k_$35$$35$1415 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA$35$$35$k_$35$$35$1415 Int)) (and (= lq_karg$36$VV$35$$35$1414$35$$35$k_$35$$35$1415 VV$35$$35$F$35$$35$46) (= lq_karg$36$a$35$$35$a3ia$35$$35$k_$35$$35$1415 a$35$$35$a3ia) (= lq_karg$36$b$35$$35$a3ib$35$$35$k_$35$$35$1415 b$35$$35$a3ib) (= lq_karg$36$c$35$$35$a3ic$35$$35$k_$35$$35$1415 c$35$$35$a3ic) (= lq_karg$36$ds_d3mz$35$$35$k_$35$$35$1415 ds_d3mz) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA$35$$35$k_$35$$35$1415 lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA) (exists ((VV$35$$35$F$35$$35$51 Int)) (and (= VV$35$$35$F$35$$35$51 a$35$$35$a3ia) (= lq_karg$36$VV$35$$35$1414$35$$35$k_$35$$35$1415 VV$35$$35$F$35$$35$51) (= lq_karg$36$a$35$$35$a3ia$35$$35$k_$35$$35$1415 a$35$$35$a3ia) (= lq_karg$36$b$35$$35$a3ib$35$$35$k_$35$$35$1415 b$35$$35$a3ib) (= lq_karg$36$c$35$$35$a3ic$35$$35$k_$35$$35$1415 c$35$$35$a3ic) (= lq_karg$36$ds_d3mz$35$$35$k_$35$$35$1415 ds_d3mz) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA$35$$35$k_$35$$35$1415 lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA))))) (exists ((lq_karg$36$ds_d3mz$35$$35$k_$35$$35$1415 Int) (lq_karg$36$b$35$$35$a3ib$35$$35$k_$35$$35$1415 Int) (lq_karg$36$c$35$$35$a3ic$35$$35$k_$35$$35$1415 Int) (lq_karg$36$a$35$$35$a3ia$35$$35$k_$35$$35$1415 Int) (lq_karg$36$VV$35$$35$1414$35$$35$k_$35$$35$1415 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA$35$$35$k_$35$$35$1415 Int)) (and (= lq_karg$36$VV$35$$35$1414$35$$35$k_$35$$35$1415 VV$35$$35$F$35$$35$46) (= lq_karg$36$a$35$$35$a3ia$35$$35$k_$35$$35$1415 a$35$$35$a3ia) (= lq_karg$36$b$35$$35$a3ib$35$$35$k_$35$$35$1415 b$35$$35$a3ib) (= lq_karg$36$c$35$$35$a3ic$35$$35$k_$35$$35$1415 c$35$$35$a3ic) (= lq_karg$36$ds_d3mz$35$$35$k_$35$$35$1415 ds_d3mz) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA$35$$35$k_$35$$35$1415 lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA) (exists ((VV$35$$35$F$35$$35$50 Int)) (and (<= a$35$$35$a3ia VV$35$$35$F$35$$35$50) (= lq_karg$36$VV$35$$35$1414$35$$35$k_$35$$35$1415 VV$35$$35$F$35$$35$50) (= lq_karg$36$a$35$$35$a3ia$35$$35$k_$35$$35$1415 a$35$$35$a3ia) (= lq_karg$36$b$35$$35$a3ib$35$$35$k_$35$$35$1415 b$35$$35$a3ib) (= lq_karg$36$c$35$$35$a3ic$35$$35$k_$35$$35$1415 c$35$$35$a3ic) (= lq_karg$36$ds_d3mz$35$$35$k_$35$$35$1415 ds_d3mz) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA$35$$35$k_$35$$35$1415 lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA))))) (exists ((lq_karg$36$ds_d3mz$35$$35$k_$35$$35$1415 Int) (lq_karg$36$b$35$$35$a3ib$35$$35$k_$35$$35$1415 Int) (lq_karg$36$c$35$$35$a3ic$35$$35$k_$35$$35$1415 Int) (lq_karg$36$a$35$$35$a3ia$35$$35$k_$35$$35$1415 Int) (lq_karg$36$VV$35$$35$1414$35$$35$k_$35$$35$1415 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA$35$$35$k_$35$$35$1415 Int)) (and (= lq_karg$36$VV$35$$35$1414$35$$35$k_$35$$35$1415 VV$35$$35$F$35$$35$46) (= lq_karg$36$a$35$$35$a3ia$35$$35$k_$35$$35$1415 a$35$$35$a3ia) (= lq_karg$36$b$35$$35$a3ib$35$$35$k_$35$$35$1415 b$35$$35$a3ib) (= lq_karg$36$c$35$$35$a3ic$35$$35$k_$35$$35$1415 c$35$$35$a3ic) (= lq_karg$36$ds_d3mz$35$$35$k_$35$$35$1415 ds_d3mz) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA$35$$35$k_$35$$35$1415 lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA) (exists ((VV$35$$35$F$35$$35$48 Int)) (and (<= a$35$$35$a3ia VV$35$$35$F$35$$35$48) (= lq_karg$36$VV$35$$35$1414$35$$35$k_$35$$35$1415 VV$35$$35$F$35$$35$48) (= lq_karg$36$a$35$$35$a3ia$35$$35$k_$35$$35$1415 a$35$$35$a3ia) (= lq_karg$36$b$35$$35$a3ib$35$$35$k_$35$$35$1415 b$35$$35$a3ib) (= lq_karg$36$c$35$$35$a3ic$35$$35$k_$35$$35$1415 c$35$$35$a3ic) (= lq_karg$36$ds_d3mz$35$$35$k_$35$$35$1415 ds_d3mz) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA$35$$35$k_$35$$35$1415 lq_anf$36$$35$$35$7205759403792806780$35$$35$d3qA)))))) b$36$$35$$35$225 b$36$$35$$35$229 b$36$$35$$35$55 b$36$$35$$35$58 b$36$$35$$35$222))
(push 1)
(assert (not (<= (apply$35$$35$0 (as Trees.Trees.sk Int) ds_d3mz) VV$35$$35$F$35$$35$46)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$225 b$36$$35$$35$229 b$36$$35$$35$55 b$36$$35$$35$58 b$36$$35$$35$446 b$36$$35$$35$222))
(push 1)
(assert (not (<= a$35$$35$a3ia VV$35$$35$F$35$$35$47)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(exit)
