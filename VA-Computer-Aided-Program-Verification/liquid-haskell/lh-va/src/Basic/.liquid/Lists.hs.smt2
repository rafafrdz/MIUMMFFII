(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun VV$35$$35$F$35$$35$28 () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF () Int)
(declare-fun cast_as_int () Int)
(declare-fun lq_karg$36$z$35$$35$aHS$35$$35$k_$35$$35$607 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$500 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.List.init () Int)
(declare-fun addrLen () Int)
(declare-fun lq_karg$36$VV$35$$35$499$35$$35$k_$35$$35$500 () Int)
(declare-fun papp5 () Int)
(declare-fun lq_tmp$36$x$35$$35$748 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun lit$36$$39$$58$$60$ () Str)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun Basic.Lists.hd () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$516 () Int)
(declare-fun ys$35$$35$aHT () Int)
(declare-fun VV$35$$35$F$35$$35$18 () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun papp3 () Int)
(declare-fun VV$35$$35$F$35$$35$15 () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_tmp$36$x$35$$35$630 () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun lq_tmp$36$x$35$$35$731 () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun lit$36$$39$Emp () Str)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun lq_tmp$36$x$35$$35$775 () Int)
(declare-fun Basic.Lists.okList () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun Control.Exception.Base.recSelError () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun lit$36$lh$45$va$45$0.1.0.0$45$Bi6E8rHESALE7Sc09x3h () Str)
(declare-fun GHC.List.zip () Int)
(declare-fun Basic.Lists.$58$$60$ () Int)
(declare-fun VV$35$$35$F$35$$35$29 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803074$35$$35$d2sO () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun VV$35$$35$F$35$$35$30 () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun lit$36$tl () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792803070$35$$35$d2sK () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$487 () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun autolen () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun lit$36$Basic.Lists () Str)
(declare-fun lq_tmp$36$x$35$$35$631 () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun papp2 () Int)
(declare-fun VV$35$$35$F$35$$35$14 () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$500 () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun GHC.Types.krep$36$$42$Arr$42$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803068$35$$35$d2sI () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun lq_karg$36$VV$35$$35$515$35$$35$k_$35$$35$516 () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$500 () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun lit$36$Use$32$of$32$partial$32$record$32$field$32$selector () Str)
(declare-fun papp7 () Int)
(declare-fun VV$35$$35$F$35$$35$11 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun lq_karg$36$Basic.Lists.okList$35$$35$k_$35$$35$607 () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun fix$36$$36$krep_aJe () Int)
(declare-fun Basic.Lists.join () Int)
(declare-fun VV$35$$35$F$35$$35$25 () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_karg$36$xs$35$$35$aHW$35$$35$k_$35$$35$607 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$516 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$516 () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun lq_karg$36$VV$35$$35$486$35$$35$k_$35$$35$487 () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803080$35$$35$d2sU () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun lq_karg$36$VV$35$$35$606$35$$35$k_$35$$35$607 () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun lq_karg$36$ds_d2se$35$$35$k_$35$$35$607 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH$35$$35$k_$35$$35$516 () Int)
(declare-fun x$35$$35$aHV () Int)
(declare-fun VV$35$$35$F$35$$35$26 () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun isJust () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$487 () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun fix$36$$36$krep_aJf () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun xs$35$$35$aHW () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun z$35$$35$aHS () Int)
(declare-fun papp1 () Int)
(declare-fun VV$35$$35$F$35$$35$17 () Int)
(declare-fun lq_tmp$36$x$35$$35$632 () Int)
(declare-fun ds_d2se () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun cast_as () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803087$35$$35$d2t1 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ$35$$35$k_$35$$35$607 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$500 () Int)
(declare-fun lq_tmp$36$x$35$$35$755 () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun lit$36$IncList () Str)
(declare-fun lq_karg$36$x$35$$35$aHV$35$$35$k_$35$$35$607 () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun VV$35$$35$F$35$$35$27 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803092$35$$35$d2t6 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$516 () Int)
(declare-fun Basic.Lists.Emp () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun lq_karg$36$ys$35$$35$aHT$35$$35$k_$35$$35$607 () Int)
(declare-fun Basic.Lists.tl () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun totalityError () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun VV$35$$35$F$35$$35$19 () Int)
(declare-fun lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$487 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun VV$35$$35$F$35$$35$22 () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803072$35$$35$d2sM () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun lit$36$hd () Str)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun VV$35$$35$F$35$$35$16 () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun fst () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)

(assert (distinct lit$36$hd lit$36$IncList lit$36$Use$32$of$32$partial$32$record$32$field$32$selector lit$36$Basic.Lists lit$36$tl lit$36$lh$45$va$45$0.1.0.0$45$Bi6E8rHESALE7Sc09x3h lit$36$$39$Emp lit$36$$39$$58$$60$))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$$39$$58$$60$) 3))
(assert (= (strLen lit$36$$39$Emp) 4))
(assert (= (strLen lit$36$lh$45$va$45$0.1.0.0$45$Bi6E8rHESALE7Sc09x3h) 34))
(assert (= (strLen lit$36$tl) 2))
(assert (= (strLen lit$36$Basic.Lists) 11))
(assert (= (strLen lit$36$Use$32$of$32$partial$32$record$32$field$32$selector) 36))
(assert (= (strLen lit$36$IncList) 7))
(assert (= (strLen lit$36$hd) 2))
(push 1)
(define-fun b$36$$35$$35$112 () Bool (= lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ ds_d2se))
(define-fun b$36$$35$$35$113 () Bool (= lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ ds_d2se))
(define-fun b$36$$35$$35$161 () Bool (and (<= VV$35$$35$F$35$$35$16 z$35$$35$aHS) (<= x$35$$35$aHV VV$35$$35$F$35$$35$16)))
(define-fun b$36$$35$$35$114 () Bool (and (= lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ (as Basic.Lists.Emp Int)) (= lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ ds_d2se)))
(define-fun b$36$$35$$35$162 () Bool (and (<= VV$35$$35$F$35$$35$17 z$35$$35$aHS) (<= x$35$$35$aHV VV$35$$35$F$35$$35$17)))
(define-fun b$36$$35$$35$115 () Bool (= lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ ds_d2se))
(define-fun b$36$$35$$35$163 () Bool (= VV$35$$35$F$35$$35$18 z$35$$35$aHS))
(define-fun b$36$$35$$35$116 () Bool (<= x$35$$35$aHV z$35$$35$aHS))
(define-fun b$36$$35$$35$164 () Bool (> VV$35$$35$F$35$$35$19 z$35$$35$aHS))
(define-fun b$36$$35$$35$101 () Bool (= lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD 1))
(define-fun b$36$$35$$35$102 () Bool (= lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE 2))
(define-fun b$36$$35$$35$118 () Bool (and (= lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ ds_d2se) (= lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ (apply$35$$35$0 (apply$35$$35$0 (as Basic.Lists.$58$$60$ Int) x$35$$35$aHV) xs$35$$35$aHW)) (= (apply$35$$35$0 (as Basic.Lists.hd Int) lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ) x$35$$35$aHV) (= (apply$35$$35$0 (as Basic.Lists.tl Int) lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ) xs$35$$35$aHW)))
(define-fun b$36$$35$$35$103 () Bool (= lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF 3))
(define-fun b$36$$35$$35$105 () Bool (and (= (apply$35$$35$0 (as Basic.Lists.hd Int) lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH) lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= (apply$35$$35$0 (as Basic.Lists.tl Int) lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH) lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG)))
(define-fun b$36$$35$$35$169 () Bool (and (= VV$35$$35$F$35$$35$27 2) (= VV$35$$35$F$35$$35$27 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE)))
(define-fun b$36$$35$$35$26 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$106 () Bool (and (= (apply$35$$35$0 (as Basic.Lists.hd Int) lq_anf$36$$35$$35$7205759403792803068$35$$35$d2sI) lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= (apply$35$$35$0 (as Basic.Lists.tl Int) lq_anf$36$$35$$35$7205759403792803068$35$$35$d2sI) lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH)))
(define-fun b$36$$35$$35$172 () Bool (> VV$35$$35$F$35$$35$14 z$35$$35$aHS))
(define-fun b$36$$35$$35$29 () Bool GHC.Types.True)
(define-fun b$36$$35$$35$173 () Bool (and (= VV$35$$35$F$35$$35$30 3) (= VV$35$$35$F$35$$35$30 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF)))
(define-fun b$36$$35$$35$174 () Bool (> VV$35$$35$F$35$$35$15 z$35$$35$aHS))
(push 1)
(push 1)
(assert (and true b$36$$35$$35$112 b$36$$35$$35$161 b$36$$35$$35$115 b$36$$35$$35$116 b$36$$35$$35$118 b$36$$35$$35$26 b$36$$35$$35$29))
(push 1)
(assert (not (<= VV$35$$35$F$35$$35$16 z$35$$35$aHS)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$112 b$36$$35$$35$113 b$36$$35$$35$114 b$36$$35$$35$164 b$36$$35$$35$26 b$36$$35$$35$29))
(push 1)
(assert (not (<= z$35$$35$aHS VV$35$$35$F$35$$35$19)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (or (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$516 Int) (lq_karg$36$VV$35$$35$515$35$$35$k_$35$$35$516 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$516 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$516 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH$35$$35$k_$35$$35$516 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$516 Int)) (and (= lq_karg$36$VV$35$$35$515$35$$35$k_$35$$35$516 VV$35$$35$F$35$$35$22) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH) (exists ((VV$35$$35$F$35$$35$27 Int)) (and (= VV$35$$35$F$35$$35$27 2) (= VV$35$$35$F$35$$35$27 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= lq_karg$36$VV$35$$35$515$35$$35$k_$35$$35$516 VV$35$$35$F$35$$35$27) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH))))) (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$516 Int) (lq_karg$36$VV$35$$35$515$35$$35$k_$35$$35$516 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$516 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$516 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH$35$$35$k_$35$$35$516 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$516 Int)) (and (= lq_karg$36$VV$35$$35$515$35$$35$k_$35$$35$516 VV$35$$35$F$35$$35$22) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH) (exists ((VV$35$$35$F$35$$35$26 Int)) (and (or (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$500 Int) (lq_karg$36$VV$35$$35$499$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$500 Int)) (and (= lq_karg$36$VV$35$$35$499$35$$35$k_$35$$35$500 VV$35$$35$F$35$$35$26) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG) (exists ((VV$35$$35$F$35$$35$30 Int)) (and (= VV$35$$35$F$35$$35$30 3) (= VV$35$$35$F$35$$35$30 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$VV$35$$35$499$35$$35$k_$35$$35$500 VV$35$$35$F$35$$35$30) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG))))) (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$500 Int) (lq_karg$36$VV$35$$35$499$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$500 Int)) (and (= lq_karg$36$VV$35$$35$499$35$$35$k_$35$$35$500 VV$35$$35$F$35$$35$26) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG) (exists ((VV$35$$35$F$35$$35$29 Int)) false)))) (= lq_karg$36$VV$35$$35$515$35$$35$k_$35$$35$516 VV$35$$35$F$35$$35$26) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH$35$$35$k_$35$$35$516 lq_anf$36$$35$$35$7205759403792803067$35$$35$d2sH)))))) b$36$$35$$35$101 b$36$$35$$35$102 b$36$$35$$35$103 b$36$$35$$35$105 b$36$$35$$35$26 b$36$$35$$35$106 b$36$$35$$35$29))
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD VV$35$$35$F$35$$35$22)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (or (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$500 Int) (lq_karg$36$VV$35$$35$499$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$500 Int)) (and (= lq_karg$36$VV$35$$35$499$35$$35$k_$35$$35$500 VV$35$$35$F$35$$35$25) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG) (exists ((VV$35$$35$F$35$$35$30 Int)) (and (= VV$35$$35$F$35$$35$30 3) (= VV$35$$35$F$35$$35$30 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$VV$35$$35$499$35$$35$k_$35$$35$500 VV$35$$35$F$35$$35$30) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG))))) (exists ((lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$500 Int) (lq_karg$36$VV$35$$35$499$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$500 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$500 Int)) (and (= lq_karg$36$VV$35$$35$499$35$$35$k_$35$$35$500 VV$35$$35$F$35$$35$25) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803063$35$$35$d2sD) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG$35$$35$k_$35$$35$500 lq_anf$36$$35$$35$7205759403792803066$35$$35$d2sG) (exists ((VV$35$$35$F$35$$35$29 Int)) false)))) b$36$$35$$35$101 b$36$$35$$35$102 b$36$$35$$35$103 b$36$$35$$35$105 b$36$$35$$35$26 b$36$$35$$35$29))
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792803064$35$$35$d2sE VV$35$$35$F$35$$35$25)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and (or (exists ((lq_karg$36$z$35$$35$aHS$35$$35$k_$35$$35$607 Int) (lq_karg$36$Basic.Lists.okList$35$$35$k_$35$$35$607 Int) (lq_karg$36$xs$35$$35$aHW$35$$35$k_$35$$35$607 Int) (lq_karg$36$VV$35$$35$606$35$$35$k_$35$$35$607 Int) (lq_karg$36$ds_d2se$35$$35$k_$35$$35$607 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ$35$$35$k_$35$$35$607 Int) (lq_karg$36$x$35$$35$aHV$35$$35$k_$35$$35$607 Int) (lq_karg$36$ys$35$$35$aHT$35$$35$k_$35$$35$607 Int)) (and (= lq_karg$36$Basic.Lists.okList$35$$35$k_$35$$35$607 Basic.Lists.okList) (= lq_karg$36$VV$35$$35$606$35$$35$k_$35$$35$607 VV$35$$35$F$35$$35$11) (= lq_karg$36$ds_d2se$35$$35$k_$35$$35$607 ds_d2se) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ$35$$35$k_$35$$35$607 lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ) (= lq_karg$36$x$35$$35$aHV$35$$35$k_$35$$35$607 x$35$$35$aHV) (= lq_karg$36$xs$35$$35$aHW$35$$35$k_$35$$35$607 xs$35$$35$aHW) (= lq_karg$36$ys$35$$35$aHT$35$$35$k_$35$$35$607 ys$35$$35$aHT) (= lq_karg$36$z$35$$35$aHS$35$$35$k_$35$$35$607 z$35$$35$aHS) (exists ((VV$35$$35$F$35$$35$15 Int)) (and (> VV$35$$35$F$35$$35$15 z$35$$35$aHS) (= lq_karg$36$Basic.Lists.okList$35$$35$k_$35$$35$607 Basic.Lists.okList) (= lq_karg$36$VV$35$$35$606$35$$35$k_$35$$35$607 VV$35$$35$F$35$$35$15) (= lq_karg$36$ds_d2se$35$$35$k_$35$$35$607 ds_d2se) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ$35$$35$k_$35$$35$607 lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ) (= lq_karg$36$x$35$$35$aHV$35$$35$k_$35$$35$607 x$35$$35$aHV) (= lq_karg$36$xs$35$$35$aHW$35$$35$k_$35$$35$607 xs$35$$35$aHW) (= lq_karg$36$ys$35$$35$aHT$35$$35$k_$35$$35$607 ys$35$$35$aHT) (= lq_karg$36$z$35$$35$aHS$35$$35$k_$35$$35$607 z$35$$35$aHS))))) (exists ((lq_karg$36$z$35$$35$aHS$35$$35$k_$35$$35$607 Int) (lq_karg$36$Basic.Lists.okList$35$$35$k_$35$$35$607 Int) (lq_karg$36$xs$35$$35$aHW$35$$35$k_$35$$35$607 Int) (lq_karg$36$VV$35$$35$606$35$$35$k_$35$$35$607 Int) (lq_karg$36$ds_d2se$35$$35$k_$35$$35$607 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ$35$$35$k_$35$$35$607 Int) (lq_karg$36$x$35$$35$aHV$35$$35$k_$35$$35$607 Int) (lq_karg$36$ys$35$$35$aHT$35$$35$k_$35$$35$607 Int)) (and (= lq_karg$36$Basic.Lists.okList$35$$35$k_$35$$35$607 Basic.Lists.okList) (= lq_karg$36$VV$35$$35$606$35$$35$k_$35$$35$607 VV$35$$35$F$35$$35$11) (= lq_karg$36$ds_d2se$35$$35$k_$35$$35$607 ds_d2se) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ$35$$35$k_$35$$35$607 lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ) (= lq_karg$36$x$35$$35$aHV$35$$35$k_$35$$35$607 x$35$$35$aHV) (= lq_karg$36$xs$35$$35$aHW$35$$35$k_$35$$35$607 xs$35$$35$aHW) (= lq_karg$36$ys$35$$35$aHT$35$$35$k_$35$$35$607 ys$35$$35$aHT) (= lq_karg$36$z$35$$35$aHS$35$$35$k_$35$$35$607 z$35$$35$aHS) (exists ((VV$35$$35$F$35$$35$18 Int)) (and (= VV$35$$35$F$35$$35$18 z$35$$35$aHS) (= lq_karg$36$Basic.Lists.okList$35$$35$k_$35$$35$607 Basic.Lists.okList) (= lq_karg$36$VV$35$$35$606$35$$35$k_$35$$35$607 VV$35$$35$F$35$$35$18) (= lq_karg$36$ds_d2se$35$$35$k_$35$$35$607 ds_d2se) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ$35$$35$k_$35$$35$607 lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ) (= lq_karg$36$x$35$$35$aHV$35$$35$k_$35$$35$607 x$35$$35$aHV) (= lq_karg$36$xs$35$$35$aHW$35$$35$k_$35$$35$607 xs$35$$35$aHW) (= lq_karg$36$ys$35$$35$aHT$35$$35$k_$35$$35$607 ys$35$$35$aHT) (= lq_karg$36$z$35$$35$aHS$35$$35$k_$35$$35$607 z$35$$35$aHS))))) (exists ((lq_karg$36$z$35$$35$aHS$35$$35$k_$35$$35$607 Int) (lq_karg$36$Basic.Lists.okList$35$$35$k_$35$$35$607 Int) (lq_karg$36$xs$35$$35$aHW$35$$35$k_$35$$35$607 Int) (lq_karg$36$VV$35$$35$606$35$$35$k_$35$$35$607 Int) (lq_karg$36$ds_d2se$35$$35$k_$35$$35$607 Int) (lq_karg$36$lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ$35$$35$k_$35$$35$607 Int) (lq_karg$36$x$35$$35$aHV$35$$35$k_$35$$35$607 Int) (lq_karg$36$ys$35$$35$aHT$35$$35$k_$35$$35$607 Int)) (and (= lq_karg$36$Basic.Lists.okList$35$$35$k_$35$$35$607 Basic.Lists.okList) (= lq_karg$36$VV$35$$35$606$35$$35$k_$35$$35$607 VV$35$$35$F$35$$35$11) (= lq_karg$36$ds_d2se$35$$35$k_$35$$35$607 ds_d2se) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ$35$$35$k_$35$$35$607 lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ) (= lq_karg$36$x$35$$35$aHV$35$$35$k_$35$$35$607 x$35$$35$aHV) (= lq_karg$36$xs$35$$35$aHW$35$$35$k_$35$$35$607 xs$35$$35$aHW) (= lq_karg$36$ys$35$$35$aHT$35$$35$k_$35$$35$607 ys$35$$35$aHT) (= lq_karg$36$z$35$$35$aHS$35$$35$k_$35$$35$607 z$35$$35$aHS) (exists ((VV$35$$35$F$35$$35$17 Int)) (and (<= VV$35$$35$F$35$$35$17 z$35$$35$aHS) (<= x$35$$35$aHV VV$35$$35$F$35$$35$17) (= lq_karg$36$Basic.Lists.okList$35$$35$k_$35$$35$607 Basic.Lists.okList) (= lq_karg$36$VV$35$$35$606$35$$35$k_$35$$35$607 VV$35$$35$F$35$$35$17) (= lq_karg$36$ds_d2se$35$$35$k_$35$$35$607 ds_d2se) (= lq_karg$36$lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ$35$$35$k_$35$$35$607 lq_anf$36$$35$$35$7205759403792803069$35$$35$d2sJ) (= lq_karg$36$x$35$$35$aHV$35$$35$k_$35$$35$607 x$35$$35$aHV) (= lq_karg$36$xs$35$$35$aHW$35$$35$k_$35$$35$607 xs$35$$35$aHW) (= lq_karg$36$ys$35$$35$aHT$35$$35$k_$35$$35$607 ys$35$$35$aHT) (= lq_karg$36$z$35$$35$aHS$35$$35$k_$35$$35$607 z$35$$35$aHS)))))) b$36$$35$$35$112 b$36$$35$$35$115 b$36$$35$$35$116 b$36$$35$$35$118 b$36$$35$$35$26 b$36$$35$$35$29))
(push 1)
(assert (not (<= x$35$$35$aHV VV$35$$35$F$35$$35$11)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and false b$36$$35$$35$101 b$36$$35$$35$102 b$36$$35$$35$103 b$36$$35$$35$26 b$36$$35$$35$29))
(push 1)
(assert (not (<= lq_anf$36$$35$$35$7205759403792803065$35$$35$d2sF VV$35$$35$F$35$$35$28)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$112 b$36$$35$$35$115 b$36$$35$$35$116 b$36$$35$$35$118 b$36$$35$$35$26 b$36$$35$$35$172 b$36$$35$$35$29))
(push 1)
(assert (not (> VV$35$$35$F$35$$35$14 z$35$$35$aHS)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(exit)
