  *** *********************************
  *** * Author: Rafael Fernandez Ortiz
  *** *********************************
  
  mod PEG is
    pr NAT .
    sorts Cell Triangle .
    subsort Cell < Triangle .

    op O[_,_] : Nat Nat -> Cell [ctor] .
    op X[_,_] : Nat Nat -> Cell [ctor] .
    op mt : -> Triangle [ctor] .
    op __ : Triangle Triangle -> Triangle [ctor assoc id: mt] .

    vars N M S N1 M1 N2 M2 : Nat .
    var C : Cell .
    vars T T1 T2 T3 T4 : Triangle .

    *** Reglas de rewrite  
    *** X X O => O O X
    crl [moveXR] : T X[N, M] X[N, M1] O[N, M2] T3 => T O[N, M] O[N, M1] X[N , M2] T3
      if M1 == M + 1 /\ M2 == M1 + 1 .
    *** O X X => X O O
    crl [moveXL] : T O[N, M] X[N, M1] X[N, M2] T3 => T X[N, M] O[N, M1] O[N , M2] T3
      if M1 == M + 1 /\ M2 == M1 + 1 .
    
    *** .. X .. X .. O .. => .. O .. O .. X ..
    crl [moveYD] : T X[N, M] T1 X[N1, M] T2 O[N2, M] T3 => T O[N, M] T1 O[N1, M] T2 X[N2, M] T3
      if N1 == N + 1 /\ N2 == N1 + 1 .

    *** .. O .. X .. X .. => .. X .. O .. O ..
    crl [moveYU] : T O[N, M] T1 X[N1, M] T2 X[N2, M] T3 => T X[N, M] T1 O[N1, M] T2 O[N2, M] T3
      if N1 == N + 1 /\ N2 == N1 + 1 .

    crl [moveDD] : T X[N, M] T1 X[N1, M1] T2 O[N2, M2] T3 => T O[N, M] T1 O[N1, M1] T2 X[N2, M2] T3
      if N1 == N + 1 /\ N2 == N1 + 1 /\ M1 == M + 1 /\ M2 == M1 + 1 .

    crl [moveDU] : T O[N, M] T1 X[N1, M1] T2 X[N2, M2] T3 => T X[N, M] T1 O[N1, M1] T2 O[N2, M2] T3
      if N1 == N + 1 /\ N2 == N1 + 1 /\ M1 == M + 1 /\ M2 == M1 + 1 .


    *** ****************************************************
    *** Generador de la fila N comenzando desde la poscion M
    op lvl : Nat Nat -> Triangle .
    eq lvl(N, M) = if M <= N then X[N, M] lvl(N, M + 1) else mt fi .

    *** Generador de triangulos vacios de tamaño M comenzando desde la creacion de la fila N
    op empty : Nat Nat -> Triangle .
    ceq empty(N, M) = mt if N = M + 1 .
    eq empty(N, M) = lvl(N, 1) empty(N + 1, M) .

    *** Generador de triangulo vacio de tamaño N
    op triangle : Nat -> Triangle .
    eq triangle(N) = empty(1, N) .

    op hole : Nat Nat Triangle -> Triangle .
    eq hole(N,M, T1 X[N,M] T2) = T1 O[N,M] T2 .

    *** Generar un tablero triangular inicial de tamaño S empezando (hueco) en la posicion N M
    op board : Nat Nat Nat -> Triangle .
    eq board(S,N,M) = hole(N, M, triangle(S)) .

    op initial : -> Triangle .
    eq initial = board(5,3,2) .

    op solution : -> Triangle .
    eq solution = board(5,3,1) .

    op countX : Triangle -> Nat .
    eq countX(mt) = 0 .
    eq countX(X[N,M] T) = 1 + countX(T) .
    eq countX(O[N,M] T) = countX(T) .


  endm

  mod INVARIANTE is
    pr PEG .

    var T : Triangle .
    vars N M : Nat .

    op ok : Triangle -> Bool .
    eq ok(T) = countX(T) == 1 .

  endm